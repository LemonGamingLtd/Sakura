--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -200,6 +_,7 @@
     private int currentImpulseContextResetGraceTime;
     public boolean affectsSpawning = true; // Paper - Affects Spawning API
     public net.kyori.adventure.util.TriState flyingFallDamage = net.kyori.adventure.util.TriState.NOT_SET; // Paper - flying fall damage
+    private long lastSprintKnockback = -1; // Sakura - configure entity knockback
 
     // CraftBukkit start
     public boolean fauxSleeping;
@@ -895,6 +_,10 @@
     public boolean isInvulnerableTo(ServerLevel level, DamageSource damageSource) {
         if (super.isInvulnerableTo(level, damageSource)) {
             return true;
+            // Sakura start - allow disabling explosions hurting players
+        } else if (!this.level().sakuraConfig().cannons.explosion.explosionsHurtPlayers && damageSource.is(DamageTypeTags.IS_EXPLOSION)) {
+            return true;
+            // Sakura end - allow disabling explosions hurting players
         } else if (damageSource.is(DamageTypeTags.IS_DROWNING)) {
             return !level.getGameRules().getBoolean(GameRules.RULE_DROWNING_DAMAGE);
         } else if (damageSource.is(DamageTypeTags.IS_FALL)) {
@@ -1225,13 +_,19 @@
         if (playerAttackEntityEvent.callEvent() && willAttack) { // Logic moved to willAttack local variable.
             {
         // Paper end - PlayerAttackEntityEvent
-                float f = this.isAutoSpinAttack() ? this.autoSpinAttackDmg : (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
+                float f = this.isAutoSpinAttack() ? this.autoSpinAttackDmg : this.getAttackDamageFromAttributes(); // Sakura - legacy combat mechanics
                 ItemStack weaponItem = this.getWeaponItem();
                 DamageSource damageSource = Optional.ofNullable(weaponItem.getItem().getDamageSource(this)).orElse(this.damageSources().playerAttack(this));
                 float f1 = this.getEnchantedDamage(target, f, damageSource) - f;
                 float attackStrengthScale = this.getAttackStrengthScale(0.5F);
+                // Sakura start - legacy combat mechanics
+                if (!this.level().sakuraConfig().players.combat.legacyCombatMechanics) {
                 f *= 0.2F + attackStrengthScale * attackStrengthScale * 0.8F;
                 f1 *= attackStrengthScale;
+                } else if (f1 != 0.0) {
+                    f1 += me.samsuik.sakura.player.combat.CombatUtil.calculateLegacySharpnessDamage(this, weaponItem, damageSource);
+                }
+                // Sakura end - legacy combat mechanics
                 // this.resetAttackStrengthTicker(); // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
                 if (target.getType().is(EntityTypeTags.REDIRECTABLE_PROJECTILE)
                     && target instanceof Projectile projectile) {
@@ -1249,7 +_,7 @@
                     if (f > 0.0F || f1 > 0.0F) {
                         boolean flag = attackStrengthScale > 0.9F;
                         boolean flag1;
-                        if (this.isSprinting() && flag) {
+                        if (this.isSprinting() && (!this.level().sakuraConfig().players.knockback.sprinting.requireFullAttack || flag)) { // Sakura - configure entity knockback
                             this.sendSoundEffect(this, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_KNOCKBACK, this.getSoundSource(), 1.0F, 1.0F); // Paper - send while respecting visibility
                             flag1 = true;
                         } else {
@@ -1265,7 +_,7 @@
                             && !this.hasEffect(MobEffects.BLINDNESS)
                             && !this.isPassenger()
                             && target instanceof LivingEntity
-                            && !this.isSprinting();
+                            && (this.level().sakuraConfig().players.combat.legacyCombatMechanics || !this.isSprinting()); // Sakura - legacy combat mechanics
                         flag2 = flag2 && !this.level().paperConfig().entities.behavior.disablePlayerCrits; // Paper - Toggleable player crits
                         if (flag2) {
                             damageSource = damageSource.critical(); // Paper - critical damage API
@@ -1292,7 +_,21 @@
                         if (flag4) {
                             float f4 = this.getKnockback(target, damageSource) + (flag1 ? 1.0F : 0.0F);
                             if (f4 > 0.0F) {
-                                if (target instanceof LivingEntity livingEntity1) {
+                                // Sakura start - configure entity knockback; extra sprinting knockback
+                                long millis = System.currentTimeMillis();
+                                long sinceLastKnockback = millis - this.lastSprintKnockback;
+                                if (flag1) { // attackHasExtraKnockback
+                                    double knockbackToApply = 0.0;
+                                    if (sinceLastKnockback >= this.level().sakuraConfig().players.knockback.sprinting.knockbackDelay.value().orElse(0)) {
+                                        knockbackToApply = this.level().sakuraConfig().players.knockback.sprinting.extraKnockback;
+                                        this.lastSprintKnockback = millis;
+                                    }
+                                    f4 = (f4 - 1.0f) + ((float) knockbackToApply * 2.0f);
+                                }
+                                if (f4 == 0.0f) {
+                                    // required
+                                } else if (target instanceof LivingEntity livingEntity1) {
+                                    // Sakura end - configure entity knockback; extra sprinting knockback
                                     livingEntity1.knockback(
                                         f4 * 0.5F, Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)), -Mth.cos(this.getYRot() * (float) (Math.PI / 180.0))
                                         , this, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.ENTITY_ATTACK // Paper - knockback events
@@ -1314,7 +_,7 @@
                                 // Paper end - Configurable sprint interruption on attack
                             }
 
-                            if (flag3) {
+                            if (flag3 && this.level().sakuraConfig().players.combat.allowSweepAttacks) { // Sakura - allow disabling sweep attacks
                                 float f5 = 1.0F + (float)this.getAttributeValue(Attributes.SWEEPING_DAMAGE_RATIO) * f;
 
                                 for (LivingEntity livingEntity2 : this.level()
@@ -1333,7 +_,7 @@
                                         }
                                         // CraftBukkit end
                                         livingEntity2.knockback(
-                                            0.4F, Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)), -Mth.cos(this.getYRot() * (float) (Math.PI / 180.0))
+                                            (float) this.level().sakuraConfig().players.knockback.sweepingEdgeKnockback, Mth.sin(this.getYRot() * (float) (Math.PI / 180.0)), -Mth.cos(this.getYRot() * (float) (Math.PI / 180.0)) // Sakura - configure entity knockback
                                             , this, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.SWEEP_ATTACK // CraftBukkit // Paper - knockback events
                                         );
                                         // CraftBukkit - moved up
@@ -1423,7 +_,7 @@
                             if (target instanceof LivingEntity) {
                                 float f7 = f3 - ((LivingEntity)target).getHealth();
                                 this.awardStat(Stats.DAMAGE_DEALT, Math.round(f7 * 10.0F));
-                                if (this.level() instanceof ServerLevel && f7 > 2.0F) {
+                                if (this.level() instanceof ServerLevel && f7 > 2.0F && !this.level().sakuraConfig().players.combat.oldSoundsAndParticleEffects) { // Sakura - old combat sounds and particles
                                     int i = (int)(f7 * 0.5);
                                     ((ServerLevel)this.level())
                                         .sendParticles(ParticleTypes.DAMAGE_INDICATOR, target.getX(), target.getY(0.5), target.getZ(), i, 0.1, 0.0, 0.1, 0.2);
@@ -1826,6 +_,7 @@
 
     // Paper start - send while respecting visibility
     private static void sendSoundEffect(Player fromEntity, double x, double y, double z, SoundEvent soundEffect, SoundSource soundCategory, float volume, float pitch) {
+        if (fromEntity.level().sakuraConfig().players.combat.oldSoundsAndParticleEffects) return; // Sakura - old combat sounds and particles
         fromEntity.level().playSound(fromEntity, x, y, z, soundEffect, soundCategory, volume, pitch); // This will not send the effect to the entity itself
         if (fromEntity instanceof ServerPlayer serverPlayer) {
             serverPlayer.connection.send(new net.minecraft.network.protocol.game.ClientboundSoundPacket(net.minecraft.core.registries.BuiltInRegistries.SOUND_EVENT.wrapAsHolder(soundEffect), soundCategory, x, y, z, volume, pitch, fromEntity.random.nextLong()));
@@ -2212,7 +_,13 @@
 
     @Override
     public EntityDimensions getDefaultDimensions(Pose pose) {
-        return POSES.getOrDefault(pose, STANDING_DIMENSIONS);
+        // Sakura start - player poses shrink collision box
+        final EntityDimensions dimensions = POSES.getOrDefault(pose, STANDING_DIMENSIONS);
+        if (!this.level().sakuraConfig().players.posesShrinkCollisionBox && dimensions.height() == STANDING_DIMENSIONS.height()) {
+            return STANDING_DIMENSIONS;
+        }
+        return dimensions;
+        // Sakura end - player poses shrink collision box
     }
 
     @Override
