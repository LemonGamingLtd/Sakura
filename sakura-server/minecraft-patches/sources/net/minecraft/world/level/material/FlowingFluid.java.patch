--- a/net/minecraft/world/level/material/FlowingFluid.java
+++ b/net/minecraft/world/level/material/FlowingFluid.java
@@ -157,7 +_,7 @@
             BlockState blockState1 = level.getBlockState(blockPos);
             FluidState fluidState1 = blockState1.getFluidState();
             if (this.canMaybePassThrough(level, pos, blockState, Direction.DOWN, blockPos, blockState1, fluidState1)) {
-                FluidState newLiquid = this.getNewLiquid(level, blockPos, blockState1);
+                FluidState newLiquid = this.getLiquid(level, blockPos, blockState1, pos, blockState); // Sakura - optimise new liquid level
                 Fluid type = newLiquid.getType();
                 if (fluidState1.canBeReplacedWith(level, blockPos, type, Direction.DOWN) && canHoldSpecificFluid(level, blockPos, blockState1, type)) {
                     // CraftBukkit start
@@ -214,6 +_,23 @@
     }
 
     protected FluidState getNewLiquid(ServerLevel level, BlockPos pos, BlockState state) {
+        // Sakura start - optimise new liquid level
+        final BlockPos abovePos = pos.above();
+        final BlockState aboveState = level.getBlockState(abovePos);
+        return this.getLiquid(level, pos, state, abovePos, aboveState);
+    }
+
+    private FluidState getLiquid(final ServerLevel world, final BlockPos flowToPos, final BlockState flowToState, final BlockPos abovePos, final BlockState aboveState) {
+        final FluidState aboveFluid = aboveState.getFluidState();
+        if (!aboveFluid.isEmpty() && aboveFluid.getType().isSame(this) && FlowingFluid.canPassThroughWall(Direction.UP, world, flowToPos, flowToState, abovePos, aboveState)) {
+            return this.getFlowing(8, true);
+        } else {
+            return this.getLiquidFromSurroundings(world, flowToPos, flowToState);
+        }
+    }
+
+    private FluidState getLiquidFromSurroundings(final ServerLevel level, final BlockPos pos, final BlockState state) {
+        // Sakura start - optimise new liquid level
         int i = 0;
         int i1 = 0;
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
@@ -240,12 +_,7 @@
             }
         }
 
-        BlockPos blockPos1 = mutableBlockPos.setWithOffset(pos, Direction.UP);
-        BlockState blockState2 = level.getBlockState(blockPos1);
-        FluidState fluidState2 = blockState2.getFluidState();
-        if (!fluidState2.isEmpty() && fluidState2.getType().isSame(this) && canPassThroughWall(Direction.UP, level, pos, state, blockPos1, blockState2)) {
-            return this.getFlowing(8, true);
-        } else {
+        { // Sakura - optimise new liquid level
             int i2 = i - this.getDropOff(level);
             return i2 <= 0 ? Fluids.EMPTY.defaultFluidState() : this.getFlowing(i2, false);
         }
@@ -464,6 +_,11 @@
     }
 
     private static boolean canHoldSpecificFluid(BlockGetter level, BlockPos pos, BlockState state, Fluid fluid) {
+        // Sakura start - configure fluids breaking redstone components
+        if (level instanceof Level gameLevel && !gameLevel.sakuraConfig().technical.redstone.fluidsBreakRedstone && (state.isSignalSource() || state.getBlock() instanceof net.minecraft.world.level.block.CarpetBlock)) {
+            return false;
+        }
+        // Sakura end - configure fluids breaking redstone components
         return !(state.getBlock() instanceof LiquidBlockContainer liquidBlockContainer) || liquidBlockContainer.canPlaceLiquid(null, level, pos, state, fluid);
     }
 
