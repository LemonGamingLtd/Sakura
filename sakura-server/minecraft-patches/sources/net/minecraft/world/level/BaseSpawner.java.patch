--- a/net/minecraft/world/level/BaseSpawner.java
+++ b/net/minecraft/world/level/BaseSpawner.java
@@ -46,12 +_,24 @@
     public int spawnRange = 4;
     private int tickDelay = 0; // Paper - Configurable mob spawner tick rate
 
+    // Sakura start - configure default mob spawner properties
+    public BaseSpawner() {
+        this.minSpawnDelay = me.samsuik.sakura.configuration.GlobalConfiguration.get().environment.mobSpawnerDefaults.minSpawnDelay;
+        this.maxSpawnDelay = me.samsuik.sakura.configuration.GlobalConfiguration.get().environment.mobSpawnerDefaults.maxSpawnDelay;
+        this.spawnCount = me.samsuik.sakura.configuration.GlobalConfiguration.get().environment.mobSpawnerDefaults.spawnCount;
+        this.maxNearbyEntities = me.samsuik.sakura.configuration.GlobalConfiguration.get().environment.mobSpawnerDefaults.maxNearbyEntities;
+        this.requiredPlayerRange = me.samsuik.sakura.configuration.GlobalConfiguration.get().environment.mobSpawnerDefaults.requiredPlayerRange;
+        this.spawnRange = me.samsuik.sakura.configuration.GlobalConfiguration.get().environment.mobSpawnerDefaults.spawnRange;
+    }
+    // Sakura start - configure default mob spawner properties
+
     public void setEntityId(EntityType<?> type, @Nullable Level level, RandomSource random, BlockPos pos) {
         this.getOrCreateNextSpawnData(level, random, pos).getEntityToSpawn().putString("id", BuiltInRegistries.ENTITY_TYPE.getKey(type).toString());
         this.spawnPotentials = SimpleWeightedRandomList.empty(); // CraftBukkit - SPIGOT-3496, MC-92282
     }
 
     public boolean isNearPlayer(Level level, BlockPos pos) {
+        if (!level.sakuraConfig().environment.mobSpawner.requireNearbyPlayer) return true; // Sakura - configure mob spawner behaviour
         return level.hasNearbyAlivePlayerThatAffectsSpawning(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, this.requiredPlayerRange); // Paper - Affects Spawning API
     }
 
@@ -117,7 +_,7 @@
                             if (!customSpawnRules.isValidPosition(blockPos, serverLevel)) {
                                 continue;
                             }
-                        } else if (!SpawnPlacements.checkSpawnRules(optional.get(), serverLevel, EntitySpawnReason.SPAWNER, blockPos, serverLevel.getRandom())) {
+                        } else if (serverLevel.sakuraConfig().environment.mobSpawner.checkSpawnConditions && !SpawnPlacements.checkSpawnRules(optional.get(), serverLevel, EntitySpawnReason.SPAWNER, blockPos, serverLevel.getRandom())) { // Sakura - configure mob spawner behaviour
                             continue;
                         }
 
@@ -145,12 +_,19 @@
                             return;
                         }
 
-                        int size1 = serverLevel.getEntities(
-                                EntityTypeTest.forExactClass(entity.getClass()),
-                                new AABB(pos.getX(), pos.getY(), pos.getZ(), pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1).inflate(this.spawnRange),
-                                EntitySelector.NO_SPECTATORS
-                            )
-                            .size();
+                        // Sakura start - configure mob spawner behaviour
+                        final int size1;
+                        if (serverLevel.sakuraConfig().environment.mobSpawner.ignoreEntityLimit) {
+                            size1 = 0;
+                        } else {
+                            size1 = serverLevel.getEntities(
+                                    EntityTypeTest.forExactClass(entity.getClass()),
+                                    new AABB(pos.getX(), pos.getY(), pos.getZ(), pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1).inflate(this.spawnRange),
+                                    EntitySelector.NO_SPECTATORS
+                                )
+                                .size();
+                        }
+                        // Sakura end - configure mob spawner behaviour
                         if (size1 >= this.maxNearbyEntities) {
                             this.delay(serverLevel, pos);
                             return;
@@ -159,8 +_,11 @@
                         entity.preserveMotion = true; // Paper - Fix Entity Teleportation and cancel velocity if teleported; preserve entity motion from tag
                         entity.moveTo(entity.getX(), entity.getY(), entity.getZ(), random.nextFloat() * 360.0F, 0.0F);
                         if (entity instanceof Mob mob) {
-                            if (nextSpawnData.getCustomSpawnRules().isEmpty() && !mob.checkSpawnRules(serverLevel, EntitySpawnReason.SPAWNER)
-                                || !mob.checkSpawnObstruction(serverLevel)) {
+                            // Sakura start - configure mob spawner behaviour
+                            if (serverLevel.sakuraConfig().environment.mobSpawner.checkSpawnConditions &&
+                                (nextSpawnData.getCustomSpawnRules().isEmpty() && !mob.checkSpawnRules(serverLevel, EntitySpawnReason.SPAWNER)
+                                    || !mob.checkSpawnObstruction(serverLevel))) {
+                                // Sakura end - configure mob spawner behaviour
                                 continue;
                             }
 
