From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Mon, 22 Apr 2024 23:01:26 +0100
Subject: [PATCH] Replace explosion density cache


diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index ae1fad06d85de83f53884449cff21fc0ae62bf97..6d8c513e78fa4efd8c7f6f534cf3958d46448efb 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -1751,6 +1751,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             serverLevel.explosionDensityCache.clear(); // Paper - Optimize explosions
             serverLevel.explosionPositions.clear(); // Sakura - client visibility settings
             serverLevel.mergeHandler.expire(currentTick); // Sakura - merge cannon entities
+            serverLevel.densityCache.invalidate(); // Sakura - explosion density cache
         }
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index a4d7c95514c3db5799efe178efee796413d1bac8..4dd2c4110d85bb7e6575b325196329900d719c64 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -838,6 +838,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     }
     // Paper end - optimise random ticking
     public final me.samsuik.sakura.entity.merge.EntityMergeHandler mergeHandler = new me.samsuik.sakura.entity.merge.EntityMergeHandler(); // Sakura - merge cannon entities
+    public final me.samsuik.sakura.explosion.density.BlockDensityCache densityCache = new me.samsuik.sakura.explosion.density.BlockDensityCache(); // Sakura - explosion density cache
 
     protected Level(
         WritableLevelData levelData,
diff --git a/net/minecraft/world/level/ServerExplosion.java b/net/minecraft/world/level/ServerExplosion.java
index 9f06e32101f494d94d9210210255d5d72ca4ff36..6d3e03b3c9fed817808de6ee08b531069d342dd5 100644
--- a/net/minecraft/world/level/ServerExplosion.java
+++ b/net/minecraft/world/level/ServerExplosion.java
@@ -296,7 +296,12 @@ public class ServerExplosion implements Explosion {
                             Math.fma(dz, diffZ, offZ)
                     );
 
-                    if (!this.clipsAnything(from, source, context, blockCache, blockPos)) {
+                    // Sakura start - replace density cache
+                    final float density = this.level.densityCache.getKnownDensity(from);
+                    if (density != me.samsuik.sakura.explosion.density.BlockDensityCache.UNKNOWN_DENSITY) {
+                        missedRays += (int) density;
+                    } else if (!this.clipsAnything(from, source, context, blockCache, blockPos)) {
+                        // Sakura end - replace density cache
                         ++missedRays;
                     }
                 }
@@ -385,8 +390,16 @@ public class ServerExplosion implements Explosion {
                         double d9 = Mth.lerp(d6, boundingBox.minY, boundingBox.maxY);
                         double d10 = Mth.lerp(d7, boundingBox.minZ, boundingBox.maxZ);
                         Vec3 vec3 = new Vec3(d8 + d3, d9, d10 + d4);
-                        if (entity.level().clip(new ClipContext(vec3, explosionVector, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, entity)).getType()
-                            == HitResult.Type.MISS) {
+                        // Sakura start - replace density cache
+                        final net.minecraft.world.phys.HitResult.Type hitResult;
+                        final float density = entity.level().densityCache.getKnownDensity(vec3);
+                        if (density != me.samsuik.sakura.explosion.density.BlockDensityCache.UNKNOWN_DENSITY) {
+                            hitResult = density != 0.0f ? net.minecraft.world.phys.HitResult.Type.MISS : net.minecraft.world.phys.HitResult.Type.BLOCK;
+                        } else {
+                            hitResult = entity.level().clip(new ClipContext(vec3, explosionVector, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, entity)).getType();
+                        }
+                        if (hitResult == HitResult.Type.MISS) {
+                            // Sakura end - replace density cache
                             i++;
                         }
 
@@ -691,6 +704,11 @@ public class ServerExplosion implements Explosion {
             return;
         }
         // CraftBukkit end
+        // Sakura start - explosion density cache
+        if (!blocks.isEmpty() && !this.level.paperConfig().environment.optimizeExplosions) {
+            this.level.densityCache.invalidate();
+        }
+        // Sakura end - explosion density cache
 
         for (BlockPos blockPos : blocks) {
             // CraftBukkit start - TNTPrimeEvent
@@ -857,14 +875,12 @@ public class ServerExplosion implements Explosion {
 
     // Paper start - Optimize explosions
     protected float getBlockDensity(Vec3 vec3d, Entity entity) {
-        if (!this.level.paperConfig().environment.optimizeExplosions) {
-            return this.getSeenFraction(vec3d, entity, this.directMappedBlockCache, this.mutablePos); // Paper - collision optimisations
-        }
-        CacheKey key = new CacheKey(this, entity.getBoundingBox());
-        Float blockDensity = this.level.explosionDensityCache.get(key);
-        if (blockDensity == null) {
+        // Sakura start - replace density cache
+        float blockDensity = this.level.densityCache.getDensity(vec3d, entity);
+        if (blockDensity == me.samsuik.sakura.explosion.density.BlockDensityCache.UNKNOWN_DENSITY) {
             blockDensity = this.getSeenFraction(vec3d, entity, this.directMappedBlockCache, this.mutablePos); // Paper - collision optimisations
-            this.level.explosionDensityCache.put(key, blockDensity);
+            this.level.densityCache.putDensity(vec3d, entity, blockDensity);
+            // Sakura end - replace density cache
         }
 
         return blockDensity;
diff --git a/net/minecraft/world/level/block/BasePressurePlateBlock.java b/net/minecraft/world/level/block/BasePressurePlateBlock.java
index 69d490c79e30fb42da69bbd804ecaea7b88fe7b0..497409e04dc4b9366da1fbe0641b8424c727a176 100644
--- a/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -109,6 +109,11 @@ public abstract class BasePressurePlateBlock extends Block {
         // CraftBukkit end
         if (currentSignal != signalStrength) {
             BlockState blockState = this.setSignalForState(state, signalStrength);
+            // Sakura start - explosion density cache
+            if (!level.paperConfig().environment.optimizeExplosions) {
+                level.densityCache.invalidate();
+            }
+            // Sakura end - explosion density cache
             level.setBlock(pos, blockState, 2);
             this.updateNeighbours(level, pos);
             level.setBlocksDirty(pos, state, blockState);
diff --git a/net/minecraft/world/level/block/TripWireHookBlock.java b/net/minecraft/world/level/block/TripWireHookBlock.java
index 6a7e5a642e2eaf7d5dffadb81738f7385a38c0af..dd2ceb8fd24281a6dd06084145f387cff55c6cc9 100644
--- a/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -182,6 +182,11 @@ public class TripWireHookBlock extends Block {
                 if (!cancelledReceiverHook) { // always trigger two events even when the first hook current change is cancelled
                 // Paper end - Call BlockRedstoneEvent
                 Direction opposite = direction.getOpposite();
+                // Sakura start - explosion density cache
+                if (!level.paperConfig().environment.optimizeExplosions) {
+                    level.densityCache.invalidate();
+                }
+                // Sakura end - explosion density cache
                 level.setBlock(blockPosx, blockState1.setValue(FACING, opposite), 3);
                 notifyNeighbors(block, level, blockPosx, opposite);
                 emitState(level, blockPosx, flag2, flag3, flag, flag1);
diff --git a/net/minecraft/world/phys/AABB.java b/net/minecraft/world/phys/AABB.java
index 85148858db1fd5e9da8bbdde4b0d84110d80e373..23d5a2726f6113eaa79196ac6f6b8db85e386f97 100644
--- a/net/minecraft/world/phys/AABB.java
+++ b/net/minecraft/world/phys/AABB.java
@@ -442,4 +442,28 @@ public class AABB {
             center.x - xSize / 2.0, center.y - ySize / 2.0, center.z - zSize / 2.0, center.x + xSize / 2.0, center.y + ySize / 2.0, center.z + zSize / 2.0
         );
     }
+
+    // Sakura start - explosion density cache
+    public final boolean isAABBInBounds(AABB bb) {
+        return this.minX <= bb.minX && this.maxX >= bb.maxX
+            && this.minY <= bb.minY && this.maxY >= bb.maxY
+            && this.minZ <= bb.minZ && this.maxZ >= bb.maxZ;
+    }
+
+    public final boolean isVec3InBounds(Vec3 p) {
+        return this.minX <= p.x && this.maxX >= p.x
+            && this.minY <= p.y && this.maxY >= p.y
+            && this.minZ <= p.z && this.maxZ >= p.z;
+    }
+
+    public final AABB expand(Vec3 pos) {
+        double minX = Math.min(this.minX, pos.x);
+        double minY = Math.min(this.minY, pos.y);
+        double minZ = Math.min(this.minZ, pos.z);
+        double maxX = Math.max(this.maxX, pos.x);
+        double maxY = Math.max(this.maxY, pos.y);
+        double maxZ = Math.max(this.maxZ, pos.z);
+        return new AABB(minX, minY, minZ, maxX, maxY, maxZ);
+    }
+    // Sakura end - explosion density cache
 }
