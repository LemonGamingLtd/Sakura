From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Wed, 15 Nov 2023 23:18:38 +0000
Subject: [PATCH] Explosion Durable Blocks


diff --git a/net/minecraft/world/item/BlockItem.java b/net/minecraft/world/item/BlockItem.java
index 68e50c6ade879d263424f244070677cb81c34c33..8467af4ee57b6699227370ada7bf15ca41fb91c3 100644
--- a/net/minecraft/world/item/BlockItem.java
+++ b/net/minecraft/world/item/BlockItem.java
@@ -45,8 +45,31 @@ public class BlockItem extends Item {
         this.block = block;
     }
 
+    // Sakura start - explosion durable blocks
+    private void sendBlockDurabilityToPlayer(UseOnContext context) {
+        Player player = context.getPlayer();
+        BlockState state = context.getLevel().getBlockState(context.getClickedPos());
+        Block block = state.getBlock();
+        me.samsuik.sakura.explosion.durable.DurableMaterial material = context.getLevel().localConfig().config(context.getClickedPos()).durableMaterials.get(block);
+
+        if (material != null) {
+            int remaining = context.getLevel().durabilityManager.durability(context.getClickedPos(), material);
+            int durability = material.durability();
+
+            player.getBukkitEntity().sendRichMessage(
+                me.samsuik.sakura.configuration.GlobalConfiguration.get().messages.durableBlockInteraction,
+                net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.unparsed("remaining", String.valueOf(remaining)),
+                net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.unparsed("durability", String.valueOf(durability))
+            );
+        }
+    }
+
     @Override
     public InteractionResult useOn(UseOnContext context) {
+        if (this.getBlock() == net.minecraft.world.level.block.Blocks.POTATOES && context.getPlayer() != null) {
+            this.sendBlockDurabilityToPlayer(context);
+        }
+        // Sakura end - explosion durable blocks
         InteractionResult interactionResult = this.place(new BlockPlaceContext(context));
         return !interactionResult.consumesAction() && context.getItemInHand().has(DataComponents.CONSUMABLE)
             ? super.use(context.getLevel(), context.getPlayer(), context.getHand())
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index b4a8a81f1fa091e45f1f39fdb69c61871d7dc6b9..19aa5010b019e343d0fb085359eac98bcb5b5efa 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -839,6 +839,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     // Paper end - optimise random ticking
     public final me.samsuik.sakura.entity.merge.EntityMergeHandler mergeHandler = new me.samsuik.sakura.entity.merge.EntityMergeHandler(); // Sakura - merge cannon entities
     public final me.samsuik.sakura.explosion.density.BlockDensityCache densityCache = new me.samsuik.sakura.explosion.density.BlockDensityCache(); // Sakura - explosion density cache
+    public final me.samsuik.sakura.explosion.durable.DurableBlockManager durabilityManager = new me.samsuik.sakura.explosion.durable.DurableBlockManager(); // Sakura - explosion durable blocks
 
     protected Level(
         WritableLevelData levelData,
diff --git a/net/minecraft/world/level/ServerExplosion.java b/net/minecraft/world/level/ServerExplosion.java
index 0285e19d6265056fb5ff9855a5dd41bd16bbc082..b66a9f646dc853f8b2f86137a668fe692e523e92 100644
--- a/net/minecraft/world/level/ServerExplosion.java
+++ b/net/minecraft/world/level/ServerExplosion.java
@@ -133,7 +133,7 @@ public class ServerExplosion implements Explosion {
             BlockState blockState = ((ca.spottedleaf.moonrise.patches.getblock.GetBlockChunk)chunk).moonrise$getBlock(x, y, z);
             FluidState fluidState = blockState.getFluidState();
 
-            Optional<Float> resistance = !calculateResistance ? Optional.empty() : this.damageCalculator.getBlockExplosionResistance((Explosion)(Object)this, this.level, pos, blockState, fluidState);
+            Optional<Float> resistance = !calculateResistance ? Optional.empty() : this.calculateBlockResistance(blockState, fluidState, pos); // Sakura - explosion durable blocks
 
             ret = new ca.spottedleaf.moonrise.patches.collisions.ExplosionBlockCache(
                     key, pos, blockState, fluidState,
@@ -393,6 +393,20 @@ public class ServerExplosion implements Explosion {
         // Paper end - collision optimisations
     }
     // Sakura end - specialised explosions
+    // Sakura start - explosion durable blocks
+    private Optional<Float> calculateBlockResistance(BlockState blockState, FluidState fluidState, BlockPos pos) {
+        if (!blockState.isAir()) {
+            Block block = blockState.getBlock();
+            me.samsuik.sakura.explosion.durable.DurableMaterial material = this.level.localConfig().config(pos).durableMaterials.get(block);
+
+            if (material != null && material.resistance() >= 0.0f && (this.level.sakuraConfig().cannons.explosion.allowNonTntBreakingDurableBlocks || this.source instanceof net.minecraft.world.entity.item.PrimedTnt)) {
+                return Optional.of(material.resistance());
+            }
+        }
+
+        return this.damageCalculator.getBlockExplosionResistance(this, this.level, pos, blockState, fluidState);
+    }
+    // Sakura end - explosion durable blocks
 
     public ServerExplosion(
         ServerLevel level,
@@ -779,6 +793,14 @@ public class ServerExplosion implements Explosion {
                 }
             }
             // CraftBukkit end
+            // Sakura start - explosion durable blocks
+            if (this.level.sakuraConfig().cannons.explosion.allowNonTntBreakingDurableBlocks || this.source instanceof net.minecraft.world.entity.item.PrimedTnt) {
+                final me.samsuik.sakura.explosion.durable.DurableMaterial material = this.level.localConfig().config(blockPos).durableMaterials.get(block);
+                if (material != null && material.durability() >= 0 && !this.level.durabilityManager.damage(blockPos, material)) {
+                    continue;
+                }
+            }
+            // Sakura end - explosion durable blocks
 
             this.level
                 .getBlockState(blockPos)
