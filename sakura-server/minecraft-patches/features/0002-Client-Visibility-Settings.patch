From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Tue, 21 Sep 2021 23:54:25 +0100
Subject: [PATCH] Client Visibility Settings


diff --git a/net/minecraft/server/level/ChunkMap.java b/net/minecraft/server/level/ChunkMap.java
index 8f9f759885a9cda57ae7d665ec309a57e12969fd..e096463443639e9eef5311d7154f6d2ac1517883 100644
--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -168,6 +168,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         this.handleLegacyStructureIndex(pos);
     }
     // Paper end - rewrite chunk system
+    private final it.unimi.dsi.fastutil.longs.Long2IntMap minimalEntities; // Sakura - client visibility settings; minimal tnt/sand
 
     public ChunkMap(
         ServerLevel level,
@@ -230,6 +231,10 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         );
         this.setServerViewDistance(viewDistance);
         this.worldGenContext = new WorldGenContext(level, generator, structureManager, this.lightEngine, null, this::setChunkUnsaved); // Paper - rewrite chunk system
+        // Sakura start - client visibility settings; minimal tnt/sand
+        this.minimalEntities = new it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap();
+        this.minimalEntities.defaultReturnValue(Integer.MIN_VALUE);
+        // Sakura end - client visibility settings; minimal tnt/sand
     }
 
     private void setChunkUnsaved(ChunkPos chunkPos) {
@@ -954,6 +959,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 tracker.serverEntity.sendChanges();
             }
         }
+
+        this.minimalEntities.clear(); // Sakura - client visibility settings; minimal tnt/sand
     }
     // Paper end - optimise entity tracker
 
@@ -1164,6 +1171,32 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             return !this.seenBy.isEmpty();
         }
         // Paper end - optimise entity tracker
+        // Sakura start - client visibility settings; entity visibility
+        private boolean checkEntityVisibility(final ServerPlayer player) {
+            final Entity entity = this.entity;
+            final me.samsuik.sakura.player.visibility.VisibilitySettings settings = player.visibilitySettings;
+            if (!settings.playerModified() || !(entity.isPrimedTNT || entity.isFallingBlock)) {
+                return true;
+            }
+            final me.samsuik.sakura.player.visibility.VisibilityType type;
+            if (entity.isPrimedTNT) {
+                type = me.samsuik.sakura.player.visibility.VisibilityTypes.TNT;
+            } else {
+                type = me.samsuik.sakura.player.visibility.VisibilityTypes.SAND;
+            }
+            final me.samsuik.sakura.player.visibility.VisibilityState state = settings.get(type);
+            if (state == me.samsuik.sakura.player.visibility.VisibilityState.MINIMAL) {
+                final long key = entity.blockPosition().asLong() ^ entity.getType().hashCode();
+                final long visibleEntity = ChunkMap.this.minimalEntities.get(key);
+                if (visibleEntity != Integer.MIN_VALUE) {
+                    return entity.getId() == visibleEntity;
+                } else {
+                    ChunkMap.this.minimalEntities.put(key, entity.getId());
+                }
+            }
+            return state != me.samsuik.sakura.player.visibility.VisibilityState.OFF;
+        }
+        // Sakura end - client visibility settings; entity visibility
 
         public TrackedEntity(final Entity entity, final int range, final int updateInterval, final boolean trackDelta) {
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, updateInterval, trackDelta, this::broadcast, this.seenBy); // CraftBukkit
@@ -1234,6 +1267,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 }
                 flag = flag && this.entity.broadcastToPlayer(player) && ChunkMap.this.isChunkTracked(player, this.entity.chunkPosition().x, this.entity.chunkPosition().z);
                 // Paper end - Configurable entity tracking range by Y
+                flag = flag && this.checkEntityVisibility(player); // Sakura start - client visibility settings; entity visibility
                 // CraftBukkit start - respect vanish API
                 if (flag && !player.getBukkitEntity().canSee(this.entity.getBukkitEntity())) { // Paper - only consider hits
                     flag = false;
diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index ca41cfe5f36b5820238df4ec4d2c749668b750f1..f2c0cd46a64fbc3fc7e6cb77acac353bb84d4073 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -569,6 +569,21 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         );
     }
     // Paper end - chunk tick iteration
+    // Sakura start - client visibility settings
+    public final LongSet explosionPositions = new it.unimi.dsi.fastutil.longs.LongOpenHashSet();
+
+    public final boolean checkExplosionVisibility(final Vec3 position, final ServerPlayer player) {
+        final me.samsuik.sakura.player.visibility.VisibilitySettings settings = player.visibilitySettings;
+        if (settings.isDisabled(me.samsuik.sakura.player.visibility.VisibilityTypes.EXPLOSIONS)) {
+            return false;
+        } else if (settings.isToggled(me.samsuik.sakura.player.visibility.VisibilityTypes.EXPLOSIONS)) {
+            final BlockPos blockPosition = BlockPos.containing(position);
+            final long encodedPosition = blockPosition.asLong();
+            return this.explosionPositions.add(encodedPosition);
+        }
+        return true;
+    }
+    // Sakura end - client visibility settings
 
     public ServerLevel(
         MinecraftServer server,
@@ -681,6 +696,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         this.chunkDataController = new ca.spottedleaf.moonrise.patches.chunk_system.io.datacontroller.ChunkDataController((ServerLevel)(Object)this, this.chunkTaskScheduler);
         // Paper end - rewrite chunk system
         this.getCraftServer().addWorld(this.getWorld()); // CraftBukkit
+        this.levelTickScheduler.registerNewTask(this.explosionPositions::clear, 0); // Sakura - client visibility settings
     }
 
     // Paper start
@@ -1856,7 +1872,18 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         for (ServerPlayer serverPlayer : this.players) {
             if (serverPlayer.distanceToSqr(vec3) < 4096.0) {
                 Optional<Vec3> optional = Optional.ofNullable(serverExplosion.getHitPlayers().get(serverPlayer));
-                serverPlayer.connection.send(new ClientboundExplodePacket(vec3, optional, particleOptions, explosionSound));
+                // Sakura start - client visibility settings; let players toggle explosion particles
+                ParticleOptions particle = particleOptions;
+                Vec3 position = vec3;
+                // In 1.22 and later this should be replaced with sending the motion through a PlayerPositionPacket.
+                // The problem here is SetEntityMotion is capped to 3.9 b/pt and the only other alternate mean was
+                // implemented in 1.21.3. I believe it's best to just wait on this issue and deal with this hack.
+                if (!this.checkExplosionVisibility(vec3, serverPlayer)) {
+                    position = new Vec3(0.0, -1024.0, 0.0);
+                    particle = net.minecraft.core.particles.ParticleTypes.SMOKE;
+                }
+                serverPlayer.connection.send(new ClientboundExplodePacket(position, optional, particle, explosionSound));
+                // Sakura end - client visibility settings; let players toggle explosion particles
             }
         }
 
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 4bf7e288b9e9643ac161fcf017d0194419290a54..8a27d202854e083d9c29abcd8486fc760a7bddd8 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -424,6 +424,7 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
     }
     // Paper end - rewrite chunk system
     public double trackingRangeModifier = 1.0; // Sakura - entity tracking range modifier
+    public final me.samsuik.sakura.player.visibility.PlayerVisibilitySettings visibilitySettings = new me.samsuik.sakura.player.visibility.PlayerVisibilitySettings(); // Sakura - client visibility settings
 
     public ServerPlayer(MinecraftServer server, ServerLevel level, GameProfile gameProfile, ClientInformation clientInformation) {
         super(level, level.getSharedSpawnPos(), level.getSharedSpawnAngle(), gameProfile);
diff --git a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index e71c1a564e5d4ac43460f89879ff709ee685706f..7d2fe5df38db1d492ae65aa72959200221cf32d5 100644
--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -51,6 +51,21 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
     public final java.util.Map<java.util.UUID, net.kyori.adventure.resource.ResourcePackCallback> packCallbacks = new java.util.concurrent.ConcurrentHashMap<>(); // Paper - adventure resource pack callbacks
     private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
     protected static final net.minecraft.resources.ResourceLocation MINECRAFT_BRAND = net.minecraft.resources.ResourceLocation.withDefaultNamespace("brand"); // Paper - Brand support
+    // Sakura start - client visibility settings
+    private @Nullable Packet<?> recreatePacket(final Packet<?> packet) {
+        final me.samsuik.sakura.player.visibility.VisibilitySettings settings = this.player.visibilitySettings;
+        if (packet instanceof net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket bedPacket) {
+            if (settings.isToggled(me.samsuik.sakura.player.visibility.VisibilityTypes.SPAWNERS) && bedPacket.getType() == net.minecraft.world.level.block.entity.BlockEntityType.MOB_SPAWNER) {
+                return null;
+            }
+        } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundBlockEventPacket bePacket) {
+            if (settings.isToggled(me.samsuik.sakura.player.visibility.VisibilityTypes.PISTONS) && bePacket.getBlock() instanceof net.minecraft.world.level.block.piston.PistonBaseBlock) {
+                return null;
+            }
+        }
+        return packet;
+    }
+    // Sakura end - client visibility settings
 
     public ServerCommonPacketListenerImpl(MinecraftServer server, Connection connection, CommonListenerCookie cookie, net.minecraft.server.level.ServerPlayer player) { // CraftBukkit
         this.server = server;
@@ -287,6 +302,12 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         } else if (packet instanceof net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket defaultSpawnPositionPacket) {
             this.player.compassTarget = org.bukkit.craftbukkit.util.CraftLocation.toBukkit(defaultSpawnPositionPacket.getPos(), this.getCraftPlayer().getWorld());
         }
+        // Sakura start - client visibility settings
+        if (this.player.visibilitySettings.playerModified()) {
+            packet = this.recreatePacket(packet);
+            if (packet == null) return;
+        }
+        // Sakura end - client visibility settings
         // CraftBukkit end
         if (packet.isTerminal()) {
             this.close();
@@ -299,7 +320,10 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
         } catch (Throwable var7) {
             CrashReport crashReport = CrashReport.forThrowable(var7, "Sending packet");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Packet being sent");
-            crashReportCategory.setDetail("Packet class", () -> packet.getClass().getCanonicalName());
+            // Sakura start - client visibility settings; packet has to be effectively final
+            final Packet<?> packetFinal = packet;
+            crashReportCategory.setDetail("Packet class", () -> packetFinal.getClass().getCanonicalName());
+            // Sakura end - client visibility settings; packet has to be effectively final
             throw new ReportedException(crashReport);
         }
     }
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 660f9d44739909150635beaa2082e85dfde915c4..648d9219cd496b1793198d5914665c346449b22e 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -3192,6 +3192,7 @@ public class ServerGamePacketListenerImpl
 
                         event.setCancelled(cancelled);
                         AbstractContainerMenu oldContainer = this.player.containerMenu; // SPIGOT-1224
+                        me.samsuik.sakura.player.gui.FeatureGui.clickEvent(event); // Sakura - client visibility settings
                         this.cserver.getPluginManager().callEvent(event);
                         if (this.player.containerMenu != oldContainer) {
                             return;
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 362c9516850fa20719a234309d2416fde5e5b324..789a64f13185b8d761e290e931ed31f8c04c6255 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -523,6 +523,10 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
     // Paper end - optimise entity tracker
     public boolean pushedByFluid = true; // Sakura - entity pushed by fluid api
+    // Sakura start - client visibility settings
+    public boolean isPrimedTNT;
+    public boolean isFallingBlock;
+    // Sakura end - client visibility settings
 
     public Entity(EntityType<?> entityType, Level level) {
         this.type = entityType;
diff --git a/net/minecraft/world/entity/item/FallingBlockEntity.java b/net/minecraft/world/entity/item/FallingBlockEntity.java
index e80b09ae0b34b5859cff7db350a731a387706ef1..bf5f3db9d62c063e8b880b831edb2f3a43d7005a 100644
--- a/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -73,6 +73,7 @@ public class FallingBlockEntity extends Entity {
     public FallingBlockEntity(EntityType<? extends FallingBlockEntity> entityType, Level level) {
         super(entityType, level);
         this.heightParity = level.sakuraConfig().cannons.mechanics.fallingBlockParity; // Sakura - configure cannon mechanics
+        this.isFallingBlock = true; // Sakura - client visibility settings
     }
 
     public FallingBlockEntity(Level level, double x, double y, double z, BlockState state) {
diff --git a/net/minecraft/world/entity/item/PrimedTnt.java b/net/minecraft/world/entity/item/PrimedTnt.java
index 6f14584c5e06864d449ebc045f4875476bbe4320..c5b9ebbd159284ae2650b0698e06011104d4b70f 100644
--- a/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/net/minecraft/world/entity/item/PrimedTnt.java
@@ -61,6 +61,7 @@ public class PrimedTnt extends Entity implements TraceableEntity {
     public PrimedTnt(EntityType<? extends PrimedTnt> entityType, Level level) {
         super(entityType, level);
         this.blocksBuilding = true;
+        this.isPrimedTNT = true; // Sakura - client visibility settings
     }
 
     public PrimedTnt(Level level, double x, double y, double z, @Nullable LivingEntity owner) {
