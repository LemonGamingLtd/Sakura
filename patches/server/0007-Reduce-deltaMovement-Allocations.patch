From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Fri, 24 Mar 2023 16:29:21 +0000
Subject: [PATCH] Reduce deltaMovement Allocations


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6872b9624be78e252df54858d8b9cb5aae93ceda..9aebb8f4c98eec7ece2eed012971d417062f76d0 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1295,7 +1295,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 this.tryCheckInsideBlocks();
                 float f = this.getBlockSpeedFactor();
 
-                this.setDeltaMovement(this.getDeltaMovement().multiply((double) f, 1.0D, (double) f));
+                this.multiplyDeltaMovement((double) f, 1.0D, (double) f); // Sakura - reduce movement allocations
                 // Paper start - remove expensive streams from here
                 boolean noneMatch = true;
                 AABB fireSearchBox = this.getBoundingBox().deflate(1.0E-6D);
@@ -1832,7 +1832,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         double d0 = this.getGravity();
 
         if (d0 != 0.0D) {
-            this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -d0, 0.0D));
+            this.addDeltaMovement(0.0D, -d0, 0.0D); // Sakura - reduce movement allocations
         }
 
     }
@@ -2124,6 +2124,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public void moveTo(double x, double y, double z, float yaw, float pitch) {
         // Paper start - Fix Entity Teleportation and cancel velocity if teleported
         if (!preserveMotion) {
+            this.movementDirty = false; // Sakura
             this.deltaMovement = Vec3.ZERO;
         } else {
             this.preserveMotion = false;
@@ -3520,29 +3521,33 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void onAboveBubbleCol(boolean drag) {
-        Vec3 vec3d = this.getDeltaMovement();
+        // Sakura start - reduce movement allocations
+        // Vec3 vec3d = this.getDeltaMovement();
+        this.syncDeltaMovement();
         double d0;
 
         if (drag) {
-            d0 = Math.max(-0.9D, vec3d.y - 0.03D);
+            d0 = Math.max(-0.9D, movementY - 0.03D);
         } else {
-            d0 = Math.min(1.8D, vec3d.y + 0.1D);
+            d0 = Math.min(1.8D, movementY + 0.1D);
         }
 
-        this.setDeltaMovement(vec3d.x, d0, vec3d.z);
+        this.setDeltaMovement(movementX, d0, movementZ);
     }
 
     public void onInsideBubbleColumn(boolean drag) {
-        Vec3 vec3d = this.getDeltaMovement();
+        // Vec3 vec3d = this.getDeltaMovement();
+        this.syncDeltaMovement();
         double d0;
 
         if (drag) {
-            d0 = Math.max(-0.3D, vec3d.y - 0.03D);
+            d0 = Math.max(-0.3D, movementY - 0.03D);
         } else {
-            d0 = Math.min(0.7D, vec3d.y + 0.06D);
+            d0 = Math.min(0.7D, movementY + 0.06D);
         }
 
-        this.setDeltaMovement(vec3d.x, d0, vec3d.z);
+        this.setDeltaMovement(movementX, d0, movementZ);
+        // Sakura end
         this.resetFallDistance();
     }
 
@@ -4541,16 +4546,19 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                     vec3d = vec3d.normalize();
                 }
 
-                Vec3 vec3d2 = this.getDeltaMovement();
+                // Sakura start - reduce movement allocations
+                // Vec3 vec3d2 = this.getDeltaMovement();
+                this.syncDeltaMovement();
 
                 vec3d = vec3d.scale(speed * 1.0D);
                 double d3 = 0.003D;
 
-                if (Math.abs(vec3d2.x) < 0.003D && Math.abs(vec3d2.z) < 0.003D && vec3d.length() < 0.0045000000000000005D) {
+                if (Math.abs(movementX) < 0.003D && Math.abs(movementZ) < 0.003D && vec3d.length() < 0.0045000000000000005D) {
                     vec3d = vec3d.normalize().scale(0.0045000000000000005D);
                 }
 
-                this.setDeltaMovement(this.getDeltaMovement().add(vec3d));
+                this.addDeltaMovement(vec3d.x, vec3d.y, vec3d.z);
+                // Sakura end
             }
 
             this.fluidHeight.put(tag, d1);
@@ -4621,11 +4629,53 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return this.chunkPosition;
     }
 
+    // Sakura start - reduce movement allocations
+    private double movementX;
+    private double movementY;
+    private double movementZ;
+    private boolean movementDirty;
+
+    public void addDeltaMovement(double x, double y, double z) {
+        syncDeltaMovement();
+        movementX += x;
+        movementY += y;
+        movementZ += z;
+    }
+
+    public void scaleDeltaMovement(double n) {
+        syncDeltaMovement();
+        movementX *= n;
+        movementY *= n;
+        movementZ *= n;
+    }
+
+    public void multiplyDeltaMovement(double x, double y, double z) {
+        syncDeltaMovement();
+        movementX *= x;
+        movementY *= y;
+        movementZ *= z;
+    }
+
+    private void updateDeltaMovement() {
+        if (movementDirty) {
+            deltaMovement = new Vec3(movementX, movementY, movementZ);
+            movementDirty = false;
+        }
+    }
+
+    private void syncDeltaMovement() {
+        if (!movementDirty) {
+            setDeltaMovement(deltaMovement.x, deltaMovement.y, deltaMovement.z);
+        }
+    }
+
     public Vec3 getDeltaMovement() {
+        updateDeltaMovement();
         return this.deltaMovement;
     }
 
     public void setDeltaMovement(Vec3 velocity) {
+        movementDirty = false;
         synchronized (this.posLock) { // Paper
         this.deltaMovement = velocity;
         } // Paper
@@ -4636,7 +4686,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     public void setDeltaMovement(double x, double y, double z) {
-        this.setDeltaMovement(new Vec3(x, y, z));
+        movementX = x;
+        movementY = y;
+        movementZ = z;
+        movementDirty = true;
+        // Sakura end
     }
 
     public final int getBlockX() {
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index 28b8efdd224e4dbb32f3eac1c9e2c512e2695dc8..7da6420aed597ee1bf544059c79a063512adcd40 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -183,7 +183,7 @@ public class FallingBlockEntity extends Entity {
                 } else {
                     BlockState iblockdata = this.level().getBlockState(blockposition);
 
-                    this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
+                    this.multiplyDeltaMovement(0.7D, -0.5D, 0.7D); // Sakura - reduce movement allocations
                     if (!iblockdata.is(Blocks.MOVING_PISTON)) {
                         if (!this.cancelDrop) {
                             boolean flag2 = iblockdata.canBeReplaced((BlockPlaceContext) (new DirectionalPlaceContext(this.level(), blockposition, Direction.DOWN, ItemStack.EMPTY, Direction.UP)));
@@ -250,7 +250,7 @@ public class FallingBlockEntity extends Entity {
                 }
             }
 
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.98D));
+            this.scaleDeltaMovement(0.98D); // Sakura - reduce movement allocations
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index dace8dc0c051ce9355d878154466ee3a548a3832..fda88328472130df8317a84fc726a73c35850c3a 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -85,9 +85,9 @@ public class PrimedTnt extends Entity implements TraceableEntity {
             return;
         }
         // Paper end - Configurable TNT height nerf
-        this.setDeltaMovement(this.getDeltaMovement().scale(0.98D));
+        this.scaleDeltaMovement(0.98D); // Sakura - reduce movement allocations
         if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
+            this.multiplyDeltaMovement(0.7D, -0.5D, 0.7D); // Sakura - reduce movement allocations
         }
 
         int i = this.getFuse() - 1;
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 9ea24dc18f70e8e3c8998f6c2b5eb3ac885df54f..482609cb5395e626f7fc5890a6db3570c6a07166 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -618,10 +618,11 @@ public class Explosion {
                         d8 *= d13;
                         d9 *= d13;
                         d10 *= d13;
-                        Vec3 vec3d1 = new Vec3(d8, d9, d10);
+                        Vec3 vec3d1 = null; // Sakura - move allocation below living entity condition
 
                         // CraftBukkit start - Call EntityKnockbackEvent
                         if (entity instanceof LivingEntity) {
+                            vec3d1 = new Vec3(d8, d9, d10); // Sakura - reduce deltaMovement allocations
                             Vec3 result = entity.getDeltaMovement().add(vec3d1);
                             org.bukkit.event.entity.EntityKnockbackEvent event = CraftEventFactory.callEntityKnockbackEvent((org.bukkit.craftbukkit.entity.CraftLivingEntity) entity.getBukkitEntity(), this.source, org.bukkit.event.entity.EntityKnockbackEvent.KnockbackCause.EXPLOSION, d13, vec3d1, result.x, result.y, result.z);
 
@@ -639,9 +640,13 @@ public class Explosion {
                                 vec3d1 = org.bukkit.craftbukkit.util.CraftVector.toNMS(paperEvent.getAcceleration());
                             }
                             // Paper end - call EntityKnockbackByEntityEvent for explosions
+                            // Sakura start - reduce deltaMovement allocations
+                            entity.setDeltaMovement(entity.getDeltaMovement().add(vec3d1));
+                        } else {
+                            entity.addDeltaMovement(d8, d9, d10);
+                            // Sakura end - reduce deltaMovement allocations
                         }
                         // CraftBukkit end
-                        entity.setDeltaMovement(entity.getDeltaMovement().add(vec3d1));
                         if (entity instanceof Player) {
                             Player entityhuman = (Player) entity;
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index cf8b8c8efd1c9c81eb5f02d75bd75875eb66771f..30e23f67a1a816dfb4f32cfe45bc8dd40938317a 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -461,7 +461,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public void updateEntityAfterFallOn(BlockGetter world, Entity entity) {
-        entity.setDeltaMovement(entity.getDeltaMovement().multiply(1.0D, 0.0D, 1.0D));
+        entity.multiplyDeltaMovement(1.0D, 0.0D, 1.0D); // Sakura
     }
 
     public ItemStack getCloneItemStack(LevelReader world, BlockPos pos, BlockState state) {
