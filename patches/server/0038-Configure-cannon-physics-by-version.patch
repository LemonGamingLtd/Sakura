From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 21 Nov 2023 17:03:08 +0000
Subject: [PATCH] Configure cannon physics by version


diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/collisions/CollisionUtil.java b/src/main/java/ca/spottedleaf/moonrise/patches/collisions/CollisionUtil.java
index ea6e252053b8910141aacd5bb82108d6abf3fb96..aa23d2665d5804e31b7c1b7021377010e74e4718 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/collisions/CollisionUtil.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/collisions/CollisionUtil.java
@@ -1463,6 +1463,14 @@ public final class CollisionUtil {
     }
 
     public static net.minecraft.world.phys.Vec3 performAABBCollisions(final net.minecraft.world.phys.Vec3 moveVector, net.minecraft.world.phys.AABB axisalignedbb, final java.util.List<net.minecraft.world.phys.AABB> potentialCollisions) {
+        // Sakura start - physics version api
+        return performAABBCollisions(moveVector, axisalignedbb, potentialCollisions, null);
+    }
+    public static net.minecraft.world.phys.Vec3 performAABBCollisions(final net.minecraft.world.phys.Vec3 moveVector,
+                                                                      net.minecraft.world.phys.AABB axisalignedbb,
+                                                                      final java.util.List<net.minecraft.world.phys.AABB> potentialCollisions,
+                                                                      final me.samsuik.sakura.physics.PhysicsVersion physics) {
+        // Sakura end - physics version api
         double x = moveVector.x;
         double y = moveVector.y;
         double z = moveVector.z;
@@ -1474,7 +1482,10 @@ public final class CollisionUtil {
             }
         }
 
-        final boolean xSmaller = Math.abs(x) < Math.abs(z);
+        // Sakura start - physics version api
+        final boolean xSmaller = physics == null || physics.afterOrEqual(1_14_0) ? Math.abs(x) < Math.abs(z)
+            : physics.isLegacy() && Math.abs(x) > Math.abs(z);
+        // Sakura end - physics version api
 
         if (xSmaller && z != 0.0) {
             z = performAABBCollisionsZ(axisalignedbb, z, potentialCollisions);
@@ -1500,9 +1511,17 @@ public final class CollisionUtil {
     public static net.minecraft.world.phys.Vec3 performCollisions(final net.minecraft.world.phys.Vec3 moveVector, net.minecraft.world.phys.AABB axisalignedbb,
                                                                   final java.util.List<net.minecraft.world.phys.shapes.VoxelShape> voxels,
                                                                   final java.util.List<net.minecraft.world.phys.AABB> aabbs) {
+        // Sakura start - physics version api
+        return performCollisions(moveVector, axisalignedbb, voxels, aabbs, null);
+    }
+    public static net.minecraft.world.phys.Vec3 performCollisions(final net.minecraft.world.phys.Vec3 moveVector, net.minecraft.world.phys.AABB axisalignedbb,
+                                                                  final java.util.List<net.minecraft.world.phys.shapes.VoxelShape> voxels,
+                                                                  final java.util.List<net.minecraft.world.phys.AABB> aabbs,
+                                                                  final me.samsuik.sakura.physics.PhysicsVersion physics) {
+        // Sakura end - physics version api
         if (voxels.isEmpty()) {
             // fast track only AABBs
-            return performAABBCollisions(moveVector, axisalignedbb, aabbs);
+            return performAABBCollisions(moveVector, axisalignedbb, aabbs, physics); // Sakura - physics version api
         }
 
         double x = moveVector.x;
@@ -1517,7 +1536,10 @@ public final class CollisionUtil {
             }
         }
 
-        final boolean xSmaller = Math.abs(x) < Math.abs(z);
+        // Sakura start - physics version api
+        final boolean xSmaller = physics == null || physics.afterOrEqual(1_14_0) ? Math.abs(x) < Math.abs(z)
+            : physics.isLegacy() && Math.abs(x) > Math.abs(z);
+        // Sakura end - physics version api
 
         if (xSmaller && z != 0.0) {
             z = performAABBCollisionsZ(axisalignedbb, z, aabbs);
diff --git a/src/main/java/me/samsuik/sakura/explosion/special/SpecialisedExplosion.java b/src/main/java/me/samsuik/sakura/explosion/special/SpecialisedExplosion.java
index 99388d6e1d536f195d7602341313e73d6797d9db..289e935a2e6dfa5d45b9c913b8ed320e1a170f93 100644
--- a/src/main/java/me/samsuik/sakura/explosion/special/SpecialisedExplosion.java
+++ b/src/main/java/me/samsuik/sakura/explosion/special/SpecialisedExplosion.java
@@ -181,9 +181,15 @@ public abstract class SpecialisedExplosion<T extends Entity> extends Explosion {
 
         if (distanceFromBottom <= 1.0) {
             double x = entity.getX() - pos.x;
-            double y = (entity instanceof PrimedTnt ? entity.getY() : entity.getEyeY()) - pos.y;
+            double y = entity.getEyeY() - pos.y; // Sakura - physics version api
             double z = entity.getZ() - pos.z;
             double distance = Math.sqrt(x * x + y * y + z * z);
+            // Sakura start - physics version api
+            if (this.physics.before(1_17_0)) {
+                distanceFromBottom = (float) distanceFromBottom;
+                distance = (float) distance;
+            }
+            // Sakura end - physics version api
 
             if (distance != 0.0D) {
                 x /= distance;
diff --git a/src/main/java/me/samsuik/sakura/explosion/special/TntExplosion.java b/src/main/java/me/samsuik/sakura/explosion/special/TntExplosion.java
index a5d13c6b0d8765e4a65b43f5835fd907738e1da4..19f0d8cf94a60b66cead3c129ded69fc3a2da0ce 100644
--- a/src/main/java/me/samsuik/sakura/explosion/special/TntExplosion.java
+++ b/src/main/java/me/samsuik/sakura/explosion/special/TntExplosion.java
@@ -40,6 +40,13 @@ public final class TntExplosion extends SpecialisedExplosion<PrimedTnt> {
         this.bounds = new AABB(x, y, z, x, y, z);
     }
 
+    // Sakura start - physics version api
+    @Override
+    protected double getExplosionOffset() {
+        return this.physics.before(1_10_0) ? (double) 0.49f : super.getExplosionOffset();
+    }
+    // Sakura end - physics version api
+
     @Override
     protected int getExplosionCount() {
         if (this.cause.getMergeEntityData().getMergeLevel() == MergeLevel.NONE) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index c1c1737bc7f57b7112567fe22a31c964cf4d10f7..ba94f23803adc9b83e46a7ed936e178064a42e71 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -384,7 +384,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     private final double[] pistonDeltas;
     private long pistonDeltasGameTime;
     private EntityDimensions dimensions;
-    private float eyeHeight;
+    protected float eyeHeight; // Sakura - private -> protected
     public boolean isInPowderSnow;
     public boolean wasInPowderSnow;
     public boolean wasOnFire;
@@ -604,6 +604,13 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
     // Sakura end - merge cannon entities
     public boolean pushedByFluid = true; // Sakura - entity pushed by fluid api
+    // Sakura start - physics version api
+    protected me.samsuik.sakura.physics.PhysicsVersion physics = me.samsuik.sakura.physics.PhysicsVersion.LATEST;
+
+    public final me.samsuik.sakura.physics.PhysicsVersion physics() {
+        return this.physics;
+    }
+    // Sakura end - physics version api
 
     public Entity(EntityType<?> type, Level world) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
@@ -1113,7 +1120,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     }
 
     protected void checkSupportingBlock(boolean onGround, @Nullable Vec3 movement) {
-        if (onGround) {
+        if (onGround && this.physics.afterOrEqual(1_20_0)) { // Sakura - physics version api
             AABB axisalignedbb = this.getBoundingBox();
             AABB axisalignedbb1 = new AABB(axisalignedbb.minX, axisalignedbb.minY - 1.0E-6D, axisalignedbb.minZ, axisalignedbb.maxX, axisalignedbb.minY, axisalignedbb.maxZ);
             Optional<BlockPos> optional = this.level.findSupportingBlock(this, axisalignedbb1);
@@ -1173,7 +1180,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         if (this.noPhysics) {
             this.setPos(this.getX() + movement.x, this.getY() + movement.y, this.getZ() + movement.z);
         } else {
-            if (movementType == MoverType.PISTON) {  // Paper
+            if (movementType == MoverType.PISTON && this.physics.afterOrEqual(1_11_0)) { // Sakura  - physics version api  // Paper
                 movement = this.limitPistonMovement(movement);
                 if (movement.equals(Vec3.ZERO)) {
                     return;
@@ -1191,10 +1198,10 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             Vec3 vec3d1 = this.sakura_collide(movement);
             double d0 = vec3d1.lengthSqr();
 
-            if (d0 > 1.0E-7D) {
-                // NOTE: Every minecraft update check if there are any new blocks that make sure of fallDistance.
+            if (d0 > 1.0E-7D || this.physics.before(1_14_0)) { // Sakura - physics version api
+                // NOTE: Every minecraft update check if there are any new blocks that make use of fallDistance.
                 // As of 1.21 the only block is powdered snow which returns a solid collision for falling blocks.
-                if (this.fallDistance != 0.0F && d0 >= 1.0D && !this.isFallingBlock) {
+                if (this.fallDistance != 0.0F && d0 >= 1.0D && !this.isFallingBlock && this.physics.afterOrEqual(1_18_2)) { // Sakura - physics version api
                     BlockHitResult movingobjectpositionblock = this.level().clip(new ClipContext(this.position(), this.position().add(vec3d1), ClipContext.Block.FALLDAMAGE_RESETTING, ClipContext.Fluid.WATER, this));
 
                     if (movingobjectpositionblock.getType() != HitResult.Type.MISS) {
@@ -1230,6 +1237,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 if (this.horizontalCollision) {
                     Vec3 vec3d2 = this.getDeltaMovement();
 
+                    // Sakura start - physics version api
+                    if (flag && flag1 && this.physics.isWithin(1_14_0, 1_18_1)) {
+                        flag = false;
+                    }
+                    // Sakura end - physics version api
                     this.setDeltaMovement(flag ? 0.0D : vec3d2.x, vec3d2.y, flag1 ? 0.0D : vec3d2.z);
                 }
 
@@ -1271,7 +1283,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             this.setPos(this.getX() + movement.x, this.getY() + movement.y, this.getZ() + movement.z);
         } else {
             this.wasOnFire = this.isOnFire();
-            if (movementType == MoverType.PISTON) {
+            if (movementType == MoverType.PISTON && this.physics.afterOrEqual(1_11_0)) { // Sakura  - physics version api
                 this.activatedTick = Math.max(this.activatedTick, MinecraftServer.currentTick + 20); // Paper
                 this.activatedImmunityTick = Math.max(this.activatedImmunityTick, MinecraftServer.currentTick + 20);   // Paper
                 movement = this.limitPistonMovement(movement);
@@ -1298,8 +1310,8 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             Vec3 vec3d1 = this.collide(movement);
             double d0 = vec3d1.lengthSqr();
 
-            if (d0 > 1.0E-7D) {
-                if (this.fallDistance != 0.0F && d0 >= 1.0D) {
+            if (d0 > 1.0E-7D || this.physics.before(1_14_0)) { // Sakura - physics version api
+                if (this.fallDistance != 0.0F && d0 >= 1.0D && this.physics.afterOrEqual(1_18_2)) { // Sakura - physics version api
                     BlockHitResult movingobjectpositionblock = this.level().clip(new ClipContext(this.position(), this.position().add(vec3d1), ClipContext.Block.FALLDAMAGE_RESETTING, ClipContext.Fluid.WATER, this));
 
                     if (movingobjectpositionblock.getType() != HitResult.Type.MISS) {
@@ -1335,6 +1347,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
                 if (this.horizontalCollision) {
                     Vec3 vec3d2 = this.getDeltaMovement();
 
+                    // Sakura start - physics version api
+                    if (flag && flag1 && this.physics.isWithin(1_14_0, 1_18_1)) {
+                        flag = false;
+                    }
+                    // Sakura end - physics version api
                     this.setDeltaMovement(flag ? 0.0D : vec3d2.x, vec3d2.y, flag1 ? 0.0D : vec3d2.z);
                 }
 
@@ -1627,7 +1644,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             bb = currBoundingBox.expandTowards(movement.x, movement.y, movement.z);
         }
         this.collectCollisions(bb, voxelList, bbList);
-        return ca.spottedleaf.moonrise.patches.collisions.CollisionUtil.performCollisions(movement, currBoundingBox, voxelList, bbList);
+        return ca.spottedleaf.moonrise.patches.collisions.CollisionUtil.performCollisions(movement, currBoundingBox, voxelList, bbList, this.physics); // Sakura - physics version api
     }
 
     private Vec3 collideAxisScan(Vec3 movement, AABB currBoundingBox, List<VoxelShape> voxelList, List<AABB> bbList) {
@@ -1635,7 +1652,10 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         double y = movement.y;
         double z = movement.z;
 
-        boolean xSmaller = Math.abs(x) < Math.abs(z);
+        // Sakura start - physics version api
+        boolean xSmaller = this.physics == null || this.physics.afterOrEqual(1_14_0) ? Math.abs(x) < Math.abs(z)
+            : this.physics.isLegacy() && Math.abs(x) > Math.abs(z);
+        // Sakura end - physics version api
 
         if (y != 0.0) {
             y = this.scanY(currBoundingBox, y, voxelList, bbList);
@@ -1748,7 +1768,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             return movement;
         }
 
-        final Vec3 limitedMoveVector = ca.spottedleaf.moonrise.patches.collisions.CollisionUtil.performCollisions(movement, currBoundingBox, potentialCollisionsVoxel, potentialCollisionsBB);
+        final Vec3 limitedMoveVector = ca.spottedleaf.moonrise.patches.collisions.CollisionUtil.performCollisions(movement, currBoundingBox, potentialCollisionsVoxel, potentialCollisionsBB, this.physics); // Sakura - physics version api
 
         if (stepHeight > 0.0
             && (onGround || (limitedMoveVector.y != movement.y && movement.y < 0.0))
@@ -1899,8 +1919,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
 
     protected void checkInsideBlocks() {
         AABB axisalignedbb = this.getBoundingBox();
-        BlockPos blockposition = BlockPos.containing(axisalignedbb.minX + 1.0E-7D, axisalignedbb.minY + 1.0E-7D, axisalignedbb.minZ + 1.0E-7D);
-        BlockPos blockposition1 = BlockPos.containing(axisalignedbb.maxX - 1.0E-7D, axisalignedbb.maxY - 1.0E-7D, axisalignedbb.maxZ - 1.0E-7D);
+        // Sakura start - physics version api
+        double offset = this.physics.afterOrEqual(1_19_3) ? 1.0E-7D : 0.001D;
+        BlockPos blockposition = BlockPos.containing(axisalignedbb.minX + offset, axisalignedbb.minY + offset, axisalignedbb.minZ + offset);
+        BlockPos blockposition1 = BlockPos.containing(axisalignedbb.maxX - offset, axisalignedbb.maxY - offset, axisalignedbb.maxZ - offset);
+        // Sakura end - physics version api
 
         if (this.level().hasChunksAt(blockposition, blockposition1)) {
             BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index 92d8b64f18cf7ac854a021e06102dad9932bfba0..a08123d67a43f9de5706dda22f3b59979f673ac4 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -147,6 +147,8 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
         this.yo = y;
         this.zo = z;
         this.setStartPos(this.blockPosition());
+        this.physics = world.localConfig().config(this.blockPosition()).physicsVersion; // Sakura - physics version api
+        this.eyeHeight = this.physics.isLegacy() ? 0.49f : this.eyeHeight; // Sakura - physics version api
     }
 
     public static FallingBlockEntity fall(Level world, BlockPos pos, BlockState state) {
@@ -159,7 +161,11 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
         FallingBlockEntity entityfallingblock = new FallingBlockEntity(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, false) : iblockdata);
         if (!CraftEventFactory.callEntityChangeBlockEvent(entityfallingblock, blockposition, iblockdata.getFluidState().createLegacyBlock())) return entityfallingblock; // CraftBukkit
 
-        world.setBlock(blockposition, iblockdata.getFluidState().createLegacyBlock(), 3);
+        // Sakura start - physics version api
+        if (entityfallingblock.physics.afterOrEqual(1_18_2)) {
+            world.setBlock(blockposition, iblockdata.getFluidState().createLegacyBlock(), 3);
+        }
+        // Sakura end - physics version api
         world.addFreshEntity(entityfallingblock, spawnReason); // CraftBukkit
         return entityfallingblock;
     }
@@ -198,10 +204,47 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
         return this.heightParity ? this.getY() : super.getEyeY();
     }
     // Sakura end - configure cannon mechanics
+    // Sakura start - physics version api
+    @Override
+    public final double distanceToSqr(Vec3 vector) {
+        if (!this.physics.isLegacy())
+            return super.distanceToSqr(vector);
+        double x = this.getX() - vector.x;
+        double y = this.getEyeY() - vector.y;
+        double z = this.getZ() - vector.z;
+        return x * x + y * y + z * z;
+    }
+
+    private BlockPos patchedBlockPosition() {
+        // mitigate the floating point issue for sand breaking below y-0
+        // 1.0e-12 allows tech that uses indirect collision clipping to still function
+        return BlockPos.containing(this.getX(), this.getY() + 1.0e-12, this.getZ());
+    }
+
+    private boolean isAbleToStackOnBlock() {
+        BlockPos pos = BlockPos.containing(this.getX(), this.getY() - 0.001f, this.getZ());
+        BlockState state = this.level().getBlockState(pos);
+        return !FallingBlock.isFree(state);
+    }
+
+    private void removeBlockOnFall(Block block) {
+        BlockPos blockposition = this.blockPosition();
+        BlockState blockstate = this.level().getBlockState(blockposition);
+
+        if (blockstate.is(block) && CraftEventFactory.callEntityChangeBlockEvent(this, blockposition, Blocks.AIR.defaultBlockState())) {
+            this.level().removeBlock(blockposition, false);
+        } else {
+            if (blockstate.is(block)) {
+                ((ServerLevel) this.level()).getChunkSource().blockChanged(blockposition);
+            }
+            this.discard(EntityRemoveEvent.Cause.DESPAWN);
+        }
+    }
+    // Sakura end - physics version api
 
     @Override
     protected double getDefaultGravity() {
-        return 0.04D;
+        return this.physics.before(1_14_0) ? 0.04F : 0.04D; // Sakura - physics version api
     }
 
     @Override
@@ -211,6 +254,11 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
         } else {
             Block block = this.blockState.getBlock();
 
+            // Sakura start - physics version api
+            if (this.time == 0 && this.physics.before(1_18_2)) {
+                this.removeBlockOnFall(block);
+            }
+            // Sakura end - physics version api
             ++this.time;
             this.applyGravity();
             this.moveStripped(MoverType.SELF, this.getDeltaMovement()); // Sakura - optimise cannon entity movement
@@ -225,8 +273,15 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
             }
             // Paper end - Configurable falling blocks height nerf
             this.handlePortal();
+            // Sakura start - physics version api
+            if (this.physics.before(1_12_0)) {
+                this.setDeltaMovement(this.getDeltaMovement().scale(0.98F));
+            }
             if (!this.level().isClientSide && (this.isAlive() || this.forceTickAfterTeleportToDuplicate)) {
-                BlockPos blockposition = this.blockPosition();
+                // Patching the floating point issue on modern versions can break some cannons that rely on it.
+                // However, it makes sense for legacy versions pre-1.17 before the world height change.
+                BlockPos blockposition = this.physics.before(1_17_0) ? this.patchedBlockPosition() : this.blockPosition();
+                // Sakura end - physics version api
                 boolean flag = this.blockState.getBlock() instanceof ConcretePowderBlock;
                 boolean flag1 = flag && this.level().getFluidState(blockposition).is(FluidTags.WATER);
                 double d0 = this.getDeltaMovement().lengthSqr();
@@ -251,8 +306,11 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
                 } else {
                     BlockState iblockdata = this.level().getBlockState(blockposition);
 
-                    this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
-                    if (!iblockdata.is(Blocks.MOVING_PISTON)) {
+                    // Sakura start - physics version api
+                    double friction = this.physics.before(1_14_0) ? 0.7F : 0.7D;
+                    this.setDeltaMovement(this.getDeltaMovement().multiply(friction, -0.5D, friction));
+                    if (!iblockdata.is(Blocks.MOVING_PISTON) && (flag1 || !this.physics.isWithin(1_9_0, 1_12_0) || this.isAbleToStackOnBlock())) {
+                        // Sakura end - physics version api
                         if (!this.cancelDrop) {
                             boolean flag2 = iblockdata.canBeReplaced((BlockPlaceContext) (new DirectionalPlaceContext(this.level(), blockposition, Direction.DOWN, ItemStack.EMPTY, Direction.UP)));
                             boolean flag3 = FallingBlock.isFree(this.level().getBlockState(blockposition.below())) && (!flag || !flag1);
@@ -319,7 +377,12 @@ public class FallingBlockEntity extends Entity implements me.samsuik.sakura.enti
                 }
             }
 
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.98D));
+            // Sakura start - physics version api
+            if (this.physics.afterOrEqual(1_12_0)) {
+                double drag = this.physics.before(1_14_0) ? 0.98F : 0.98D;
+                this.setDeltaMovement(this.getDeltaMovement().scale(drag));
+            }
+            // Sakura end - physics version api
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index 4d0cfa1f96a04713cb1d51c7aaaf91374a0d6c17..96c43df6834e20a9e04eb095f36a644ec393c342 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -102,6 +102,13 @@ public class PrimedTnt extends Entity implements TraceableEntity, me.samsuik.sak
             case Y -> this.setDeltaMovement(this.getDeltaMovement().multiply(0.0, 1.0, 0.0));
         }
         // Sakura end - configure cannon mechanics
+        // Sakura start - physics version api
+        this.physics = world.localConfig().config(this.blockPosition()).physicsVersion;
+        this.eyeHeight = this.physics.isLegacy() ? 0.49f : this.eyeHeight;
+        if (this.physics.isLegacy()) {
+            this.setDeltaMovement(this.getDeltaMovement().multiply(0.0, 1.0, 0.0));
+        }
+        // Sakura end - physics version api
     }
 
     @Override
@@ -134,10 +141,26 @@ public class PrimedTnt extends Entity implements TraceableEntity, me.samsuik.sak
         }
     }
     // Sakura end - optimise tnt fluid state
+    // Sakura start - physics version api
+    @Override
+    public final double getEyeY() {
+        return this.physics.isLegacy() ? super.getEyeY() : this.getY();
+    }
+
+    @Override
+    public final double distanceToSqr(net.minecraft.world.phys.Vec3 vector) {
+        if (!this.physics.isLegacy())
+            return super.distanceToSqr(vector);
+        double x = this.getX() - vector.x;
+        double y = this.getEyeY() - vector.y;
+        double z = this.getZ() - vector.z;
+        return x * x + y * y + z * z;
+    }
+    // Sakura end - physics version api
 
     @Override
     protected double getDefaultGravity() {
-        return 0.04D;
+        return this.physics.before(1_14_0) ? 0.04F : 0.04D; // Sakura - physics version api
     }
 
     @Override
@@ -152,15 +175,19 @@ public class PrimedTnt extends Entity implements TraceableEntity, me.samsuik.sak
             return;
         }
         // Paper end - Configurable TNT height nerf
-        this.setDeltaMovement(this.getDeltaMovement().scale(0.98D));
+        // Sakura start - physics version api
+        double drag = this.physics.before(1_14_0) ? 0.98F : 0.98D;
+        this.setDeltaMovement(this.getDeltaMovement().scale(drag));
         if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
+            double friction = this.physics.before(1_14_0) ? 0.7F : 0.7D;
+            this.setDeltaMovement(this.getDeltaMovement().multiply(friction, -0.5D, friction));
+            // Sakura end - physics version api
         }
 
         int i = this.getFuse() - 1;
 
         this.setFuse(i);
-        if (i <= 0) {
+        if (this.physics.before(1_9_0) ? (i < 0) : (i <= 0)) { // Sakura - physics version api
             // CraftBukkit start - Need to reverse the order of the explosion and the entity death so we have a location for the event
             // this.discard();
             this.respawnEntity(); // Sakura - merge cannon entities
@@ -213,7 +240,10 @@ public class PrimedTnt extends Entity implements TraceableEntity, me.samsuik.sak
         ExplosionPrimeEvent event = CraftEventFactory.callExplosionPrimeEvent((org.bukkit.entity.Explosive)this.getBukkitEntity());
 
         if (!event.isCancelled()) {
-            this.level().explode(this, Explosion.getDefaultDamageSource(this.level(), this), this.usedPortal ? PrimedTnt.USED_PORTAL_DAMAGE_CALCULATOR : null, this.getX(), this.getY(0.0625D), this.getZ(), event.getRadius(), event.getFire(), Level.ExplosionInteraction.TNT);
+            // Sakura start - physics version api
+            double pos = this.physics.before(1_10_0) ? this.getY() + (double) 0.49f : this.getY(0.0625D);
+            this.level().explode(this, Explosion.getDefaultDamageSource(this.level(), this), this.usedPortal ? PrimedTnt.USED_PORTAL_DAMAGE_CALCULATOR : null, this.getX(), pos, this.getZ(), event.getRadius(), event.getFire(), Level.ExplosionInteraction.TNT);
+            // Sakura end - physics version api
         }
         // CraftBukkit end
     }
@@ -289,7 +319,7 @@ public class PrimedTnt extends Entity implements TraceableEntity, me.samsuik.sak
     // Paper start - Option to prevent TNT from moving in water
     @Override
     public boolean isPushedByFluid() {
-        return !level().paperConfig().fixes.preventTntFromMovingInWater && level().sakuraConfig().cannons.mechanics.tntFlowsInWater && super.isPushedByFluid(); // Sakura - configure cannon mechanics
+        return !level().paperConfig().fixes.preventTntFromMovingInWater && !this.physics.isLegacy() && level().sakuraConfig().cannons.mechanics.tntFlowsInWater && super.isPushedByFluid(); // Sakura - physics version api // Sakura - configure cannon mechanics
     }
     // Paper end - Option to prevent TNT from moving in water
 }
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 6852abf596187b328a1e67bd915c5870a1a60688..d0ba33c84cb2c1d01a368f5ec8a047da5cf81863 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -78,6 +78,7 @@ public class Explosion {
     // CraftBukkit end
     public boolean excludeSourceFromDamage = true; // Paper - Allow explosions to damage source
     private final boolean consistentRadius; // Sakura - consistent explosion radius
+    protected final me.samsuik.sakura.physics.PhysicsVersion physics; // Sakura - physics version api
 
     // Paper start - optimise collisions
     private static final double[] CACHED_RAYS;
@@ -453,6 +454,7 @@ public class Explosion {
         this.explosionSound = soundEvent;
         this.yield = this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY ? 1.0F / this.radius : 1.0F; // CraftBukkit
         this.consistentRadius = world.localConfig().config(BlockPos.containing(x, y, z)).consistentRadius; // Sakura - consistent explosion radius
+        this.physics = entity != null ? entity.physics() : world.localConfig().config(BlockPos.containing(x, y, z)).physicsVersion; // Sakura - physics version api
     }
 
     private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity entity) {
@@ -484,8 +486,12 @@ public class Explosion {
                         final float density = entity.level().densityCache.getKnownDensity(vec3d1);
                         if (density != me.samsuik.sakura.explosion.density.BlockDensityCache.UNKNOWN_DENSITY) {
                             hitResult = density != 0.0f ? net.minecraft.world.phys.HitResult.Type.MISS : net.minecraft.world.phys.HitResult.Type.BLOCK;
+                            // Sakura start - physics version api
+                        } else if (entity.physics().before(1_14_0)) {
+                            hitResult = entity.level().clipLegacy(vec3d1, source);
                         } else {
-                            hitResult = entity.level().clip(new ClipContext(vec3d1, source, ClipContext.Block.COLLIDER, ClipContext.Fluid.NONE, entity)).getType();
+                            hitResult = entity.level().clip(new ClipContext(vec3d1, source, entity.physics().afterOrEqual(1_16_0) ? ClipContext.Block.COLLIDER : ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, entity)).getType();
+                            // Sakura end - physics version api
                         }
                         if (hitResult == HitResult.Type.MISS) {
                             // Sakura end - replace density cache
@@ -581,6 +587,15 @@ public class Explosion {
                             }
 
                             if (cachedBlock.outOfWorld) {
+                                // Sakura start - physics version api
+                                if (this.physics.before(1_17_0)) {
+                                    currX += incX;
+                                    currY += incY;
+                                    currZ += incZ;
+                                    power -= 0.22500001F;
+                                    continue;
+                                }
+                                // Sakura end - physics version api
                                 break;
                             }
                             // Paper end - collision optimisations
@@ -683,9 +698,15 @@ public class Explosion {
 
                 if (d7 <= 1.0D) {
                     double d8 = entity.getX() - this.x;
-                    double d9 = (entity instanceof PrimedTnt ? entity.getY() : entity.getEyeY()) - this.y;
+                    double d9 = entity.getEyeY() - this.y; // Sakura - physics version api
                     double d10 = entity.getZ() - this.z;
                     double d11 = Math.sqrt(d8 * d8 + d9 * d9 + d10 * d10);
+                    // Sakura start - physics version api
+                    if (this.physics.before(1_17_0)) {
+                        d7  = (float) d7;
+                        d11 = (float) d11;
+                    }
+                    // Sakura end - physics version api
 
                     if (d11 != 0.0D) {
                         d8 /= d11;
@@ -1018,7 +1039,7 @@ public class Explosion {
         // Sakura start - replace density cache
         float blockDensity = this.level.densityCache.getDensity(vec3d, entity);
         if (blockDensity == me.samsuik.sakura.explosion.density.BlockDensityCache.UNKNOWN_DENSITY) {
-            blockDensity = this.getSeenFraction(vec3d, entity, blockCache, blockPos); // Paper - optimise explosions;
+            blockDensity = this.getSeenPercent(vec3d, entity, blockCache, blockPos); // Sakura - physics version api // Paper - optimise explosions;
             this.level.densityCache.putDensity(vec3d, entity, blockDensity);
             // Sakura end - replace density cache
         }
@@ -1026,6 +1047,17 @@ public class Explosion {
         return blockDensity;
     }
 
+    // Sakura start - physics version api
+    private float getSeenPercent(Vec3 vec3d, Entity entity, ca.spottedleaf.moonrise.patches.collisions.ExplosionBlockCache[] blockCache, BlockPos.MutableBlockPos blockPos) {
+        if (this.physics.afterOrEqual(1_16_0)) {
+            // Papers impl is untouched, intended to be used as a fast path.
+            return this.getSeenFraction(vec3d, entity, blockCache, blockPos);
+        } else {
+            return getSeenPercent(vec3d, entity);
+        }
+    }
+    // Sakura end - physics version api
+
     static class CacheKey {
         private final Level world;
         private final double posX, posY, posZ;
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 20d6044e32cc56089a175675ff74dca02d68e75a..bd72b02c20fb56c2351f865dfff2573545ac313a 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -695,6 +695,170 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         return chunk != null ? chunk.getNoiseBiome(x, y, z) : this.getUncachedNoiseBiome(x, y, z);
     }
     // Paper end - optimise random ticking
+    // Sakura start - physics version api
+    public final net.minecraft.world.phys.BlockHitResult.Type clipLegacy(Vec3 from, Vec3 to) {
+        int toX = Mth.floor(to.x);
+        int toY = Mth.floor(to.y);
+        int toZ = Mth.floor(to.z);
+        int fromX = Mth.floor(from.x);
+        int fromY = Mth.floor(from.y);
+        int fromZ = Mth.floor(from.z);
+
+        BlockPos.MutableBlockPos blockPos = new BlockPos.MutableBlockPos(fromX, fromY, fromZ);
+        LevelChunk chunk = this.getChunkIfLoaded(fromX >> 4, fromZ >> 4);
+        if (chunk == null) {
+            return net.minecraft.world.phys.BlockHitResult.Type.MISS;
+        }
+
+        BlockState blockstate = chunk.getBlockState(blockPos);
+        VoxelShape shape = blockstate.getShape(this, blockPos);
+        for (AABB bb : shape.toAabbs()) {
+            if (this.clip(bb, blockPos, from, to)) {
+                return net.minecraft.world.phys.BlockHitResult.Type.BLOCK;
+            }
+        }
+
+        for (int steps = 0; steps < 16; ++steps) {
+            if (fromX == toX && fromY == toY && fromZ == toZ) {
+                return net.minecraft.world.phys.BlockHitResult.Type.MISS;
+            }
+
+            boolean moveX = true;
+            boolean moveY = true;
+            boolean moveZ = true;
+            double d0 = 999.0D;
+            double d1 = 999.0D;
+            double d2 = 999.0D;
+
+            if (toX > fromX) {
+                d0 = (double) fromX + 1.0D;
+            } else if (toX < fromX) {
+                d0 = (double) fromX + 0.0D;
+            } else {
+                moveX = false;
+            }
+
+            if (toY > fromY) {
+                d1 = (double) fromY + 1.0D;
+            } else if (toY < fromY) {
+                d1 = (double) fromY + 0.0D;
+            } else {
+                moveY = false;
+            }
+
+            if (toZ > fromZ) {
+                d2 = (double) fromZ + 1.0D;
+            } else if (toZ < fromZ) {
+                d2 = (double) fromZ + 0.0D;
+            } else {
+                moveZ = false;
+            }
+
+            double d3 = 999.0D;
+            double d4 = 999.0D;
+            double d5 = 999.0D;
+            double d6 = to.x - from.x;
+            double d7 = to.y - from.y;
+            double d8 = to.z - from.z;
+
+            if (moveX) d3 = (d0 - from.x) / d6;
+            if (moveY) d4 = (d1 - from.y) / d7;
+            if (moveZ) d5 = (d2 - from.z) / d8;
+
+            if (d3 == -0.0D) d3 = -1.0E-4D;
+            if (d4 == -0.0D) d4 = -1.0E-4D;
+            if (d5 == -0.0D) d5 = -1.0E-4D;
+
+            Direction moveDir;
+            if (d3 < d4 && d3 < d5) {
+                moveDir = toX > fromX ? Direction.WEST : Direction.EAST;
+                from = new Vec3(d0, from.y + d7 * d3, from.z + d8 * d3);
+            } else if (d4 < d5) {
+                moveDir = toY > fromY ? Direction.DOWN : Direction.UP;
+                from = new Vec3(from.x + d6 * d4, d1, from.z + d8 * d4);
+            } else {
+                moveDir = toZ > fromZ ? Direction.NORTH : Direction.SOUTH;
+                from = new Vec3(from.x + d6 * d5, from.y + d7 * d5, d2);
+            }
+
+            fromX = Mth.floor(from.x) - (moveDir == Direction.EAST ? 1 : 0);
+            fromY = Mth.floor(from.y) - (moveDir == Direction.UP ? 1 : 0);
+            fromZ = Mth.floor(from.z) - (moveDir == Direction.SOUTH ? 1 : 0);
+            blockPos.set(fromX, fromY, fromZ);
+
+            int chunkX = fromX >> 4;
+            int chunkZ = fromZ >> 4;
+            if (chunkX != chunk.locX || chunkZ != chunk.locZ) {
+                chunk = this.getChunkIfLoaded(chunkX, chunkZ);
+            }
+            if (chunk == null) {
+                return net.minecraft.world.phys.BlockHitResult.Type.MISS;
+            }
+
+            blockstate = chunk.getBlockState(blockPos);
+            shape = blockstate.getShape(this, blockPos);
+            for (AABB bb : shape.toAabbs()) {
+                if (this.clip(bb, blockPos, from, to)) {
+                    return net.minecraft.world.phys.BlockHitResult.Type.BLOCK;
+                }
+            }
+        }
+        return net.minecraft.world.phys.BlockHitResult.Type.MISS;
+    }
+
+    private boolean clip(AABB bb, BlockPos blockposition, net.minecraft.world.phys.Vec3 vec3d, net.minecraft.world.phys.Vec3 vec3d1) {
+        vec3d = vec3d.subtract(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+        vec3d1 = vec3d1.subtract(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+
+        double x = vec3d1.x - vec3d.x;
+        double y = vec3d1.y - vec3d.y;
+        double z = vec3d1.z - vec3d.z;
+
+        double minXd = this.clip(bb.minX, x, vec3d.x);
+        double minYd = this.clip(bb.minY, y, vec3d.y);
+        double minZd = this.clip(bb.minZ, z, vec3d.z);
+        double maxXd = this.clip(bb.maxX, x, vec3d.x);
+        double maxYd = this.clip(bb.maxY, y, vec3d.y);
+        double maxZd = this.clip(bb.maxZ, z, vec3d.z);
+
+        return this.clipX(vec3d, bb, minXd, y, z) || this.clipY(vec3d, bb, minYd, x, z) || this.clipZ(vec3d, bb, minZd, x, y)
+            || this.clipX(vec3d, bb, maxXd, y, z) || this.clipY(vec3d, bb, maxYd, x, z) || this.clipZ(vec3d, bb, maxZd, x, y);
+    }
+
+    private double clip(double bound, double axisD, double axisN) {
+        if (axisD * axisD < 1.0000000116860974E-7D) {
+            return -1.0;
+        }
+        return (bound - axisN) / axisD;
+    }
+
+    private boolean clipX(Vec3 vec3d, AABB bb, double n, double y, double z) {
+        if (n < 0.0 || n > 1.0) {
+            return false;
+        }
+        y = vec3d.y + y * n;
+        z = vec3d.z + z * n;
+        return y >= bb.minY && y <= bb.maxY && z >= bb.minZ && z <= bb.maxZ;
+    }
+
+    private boolean clipY(Vec3 vec3d, AABB bb, double n, double x, double z) {
+        if (n < 0.0 || n > 1.0) {
+            return false;
+        }
+        x = vec3d.x + x * n;
+        z = vec3d.z + z * n;
+        return x >= bb.minX && x <= bb.maxX && z >= bb.minZ && z <= bb.maxZ;
+    }
+
+    private boolean clipZ(Vec3 vec3d, AABB bb, double n, double x, double y) {
+        if (n < 0.0 || n > 1.0) {
+            return false;
+        }
+        x = vec3d.x + x * n;
+        y = vec3d.y + y * n;
+        return x >= bb.minX && x <= bb.maxX && y >= bb.minY && y <= bb.maxY;
+    }
+    // Sakura end - physics version api
     public final me.samsuik.sakura.entity.merge.EntityMergeHandler mergeHandler = new me.samsuik.sakura.entity.merge.EntityMergeHandler(); // Sakura - merge cannon entities
     public final me.samsuik.sakura.explosion.density.BlockDensityCache densityCache = new me.samsuik.sakura.explosion.density.BlockDensityCache(); // Sakura - explosion density cache
     public final me.samsuik.sakura.explosion.durable.DurableBlockManager durabilityManager = new me.samsuik.sakura.explosion.durable.DurableBlockManager(); // Sakura - explosion durable blocks
diff --git a/src/main/java/net/minecraft/world/level/block/FallingBlock.java b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
index 1ea1232a5ba3e48eef3a139d6487c9a190155ebd..4cf5147c8b089c3fa5476a05501fae0d9afaf341 100644
--- a/src/main/java/net/minecraft/world/level/block/FallingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FallingBlock.java
@@ -35,6 +35,15 @@ public abstract class FallingBlock extends Block implements Fallable {
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
+    // Sakura start - physics version api
+    @Override
+    public void neighborChanged(BlockState state, Level world, BlockPos pos, Block block, BlockPos fromPos, boolean notify) {
+        if (world.localConfig().config(pos).physicsVersion.before(1_18_2)) {
+            world.scheduleTick(pos, this, this.getDelayAfterPlace());
+        }
+    }
+    // Sakura end - physics version api
+
     @Override
     protected void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (isFree(world.getBlockState(pos.below())) && pos.getY() >= world.getMinBuildHeight()) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index 26ed17e433cbafbbf788231f27f296f08048adfe..40176223df11efd9cb63d2a9abc425fefa860d3f 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -180,8 +180,13 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
             }
             // CraftBukkit end
 
-            if ((Boolean) state.getValue(FenceGateBlock.POWERED) != flag1) {
-                world.setBlock(pos, (BlockState) ((BlockState) state.setValue(FenceGateBlock.POWERED, flag1)).setValue(FenceGateBlock.OPEN, flag1), 2);
+            // Sakura start - physics version api
+            final boolean legacy = world.localConfig().config(pos).physicsVersion.before(1_11_0);
+            final boolean powered = state.getValue(FenceGateBlock.POWERED);
+            if (legacy ? (flag1 || sourceBlock.defaultBlockState().isSignalSource()) : powered != flag1) {
+                final boolean openGate = legacy && (flag1 == powered || state.getValue(FenceGateBlock.OPEN) != powered) ? state.getValue(OPEN) : flag1;
+                world.setBlock(pos, (BlockState) ((BlockState) state.setValue(FenceGateBlock.POWERED, flag1)).setValue(FenceGateBlock.OPEN, openGate), 2);
+                // Sakura end - physics version api
                 if ((Boolean) state.getValue(FenceGateBlock.OPEN) != flag1) {
                     world.playSound((Player) null, pos, flag1 ? this.type.fenceGateOpen() : this.type.fenceGateClose(), SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
                     world.gameEvent((Entity) null, (Holder) (flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE), pos);
diff --git a/src/main/java/net/minecraft/world/level/block/LadderBlock.java b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
index 4b402a7222f78617ef7d28d329f4daac74954347..54781ea0771327f93a7cf672bb4b2945700c47e5 100644
--- a/src/main/java/net/minecraft/world/level/block/LadderBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LadderBlock.java
@@ -28,6 +28,21 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
     protected static final VoxelShape WEST_AABB = Block.box(13.0, 0.0, 0.0, 16.0, 16.0, 16.0);
     protected static final VoxelShape SOUTH_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 16.0, 3.0);
     protected static final VoxelShape NORTH_AABB = Block.box(0.0, 0.0, 13.0, 16.0, 16.0, 16.0);
+    // Sakura start - physics version api
+    protected static final VoxelShape LEGACY_EAST_AABB = Block.box(0.0, 0.0, 0.0, 2.0, 16.0, 16.0);
+    protected static final VoxelShape LEGACY_WEST_AABB = Block.box(14.0, 0.0, 0.0, 16.0, 16.0, 16.0);
+    protected static final VoxelShape LEGACY_SOUTH_AABB = Block.box(0.0, 0.0, 0.0, 16.0, 16.0, 2.0);
+    protected static final VoxelShape LEGACY_NORTH_AABB = Block.box(0.0, 0.0, 14.0, 16.0, 16.0, 16.0);
+
+    private static VoxelShape legacyShape(Direction facing) {
+        return switch (facing) {
+            case NORTH -> LEGACY_NORTH_AABB;
+            case SOUTH -> LEGACY_SOUTH_AABB;
+            case WEST  -> LEGACY_WEST_AABB;
+            default    -> LEGACY_EAST_AABB;
+        };
+    }
+    // Sakura end - physics version api
 
     @Override
     public MapCodec<LadderBlock> codec() {
@@ -39,8 +54,18 @@ public class LadderBlock extends Block implements SimpleWaterloggedBlock {
         this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(WATERLOGGED, Boolean.valueOf(false)));
     }
 
+    // Sakura start - physics version api
+    @Override
+    public final boolean hasDynamicShape() {
+        return true;
+    }
+
     @Override
     protected VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
+        if (world instanceof net.minecraft.world.level.Level level && level.localConfig().config(pos).physicsVersion.before(1_9_0)) {
+            return legacyShape(state.getValue(FACING));
+        }
+        // Sakura end - physics version api
         switch ((Direction)state.getValue(FACING)) {
             case NORTH:
                 return NORTH_AABB;
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 84623c632d8c2f0fa7ec939c711316d757117d23..afd6549f110ce32a1ad382b17f202ab53e7e6496 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -190,8 +190,26 @@ public class LiquidBlock extends Block implements BucketPickup {
                 BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
 
                 if (world.getFluidState(blockposition1).is(FluidTags.WATER)) {
-                    Block block = world.getFluidState(pos).isSource() ? Blocks.OBSIDIAN : Blocks.COBBLESTONE;
-
+                    // Sakura start - physics version api
+                    final FluidState fluidState = state.getFluidState();
+                    final Block block;
+
+                    if (fluidState.isSource()) {
+                        block = Blocks.OBSIDIAN;
+                    } else {
+                        final me.samsuik.sakura.physics.PhysicsVersion physics = world.localConfig().config(pos).physicsVersion;
+
+                        // SANITY: In legacy a patch by paper removes the fluid level condition from vanilla.
+                        if (physics.afterOrEqual(1_16_0) || physics.isLegacy()
+                            || physics.afterOrEqual(1_13_0) && fluidState.getHeight(world, pos) >= 0.44444445f
+                            || physics.before(1_13_0) && FlowingFluid.getLegacyLevel(fluidState) <= 4
+                        ) {
+                            block = Blocks.COBBLESTONE;
+                        } else {
+                            return true;
+                        }
+                    }
+                    // Sakura end - physics version api
                     // CraftBukkit start
                     if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, pos, block.defaultBlockState())) {
                         this.fizz(world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 88ddd1747d9786210e8faf412b3b0363df4bab43..b6c3aa283b8c6dcd5af4f770301a5481af82f945 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -699,6 +699,10 @@ public class RedStoneWireBlock extends Block {
     protected InteractionResult useWithoutItem(BlockState state, Level world, BlockPos pos, Player player, BlockHitResult hit) {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
+            // Sakura start - physics version api
+        } else if (world.localConfig().config(pos).physicsVersion.before(1_16_0)) {
+            return InteractionResult.PASS;
+            // Sakura end - physics version api
         } else {
             if (RedStoneWireBlock.isCross(state) || RedStoneWireBlock.isDot(state)) {
                 BlockState iblockdata1 = RedStoneWireBlock.isCross(state) ? this.defaultBlockState() : this.crossState;
diff --git a/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java b/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java
index 932831bb5632ead5850842fc77192c841571162e..4300c421556b7a1e45812f54017a9b8435d33975 100644
--- a/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WaterlilyBlock.java
@@ -21,6 +21,7 @@ public class WaterlilyBlock extends BushBlock {
 
     public static final MapCodec<WaterlilyBlock> CODEC = simpleCodec(WaterlilyBlock::new);
     protected static final VoxelShape AABB = Block.box(1.0D, 0.0D, 1.0D, 15.0D, 1.5D, 15.0D);
+    protected static final VoxelShape LEGACY_AABB = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 0.25D, 16.0D); // Sakura - physics version api
 
     @Override
     public MapCodec<WaterlilyBlock> codec() {
@@ -46,8 +47,18 @@ public class WaterlilyBlock extends BushBlock {
 
     }
 
+    // Sakura start - physics version api
+    @Override
+    public final boolean hasDynamicShape() {
+        return true;
+    }
+
     @Override
     protected VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
+        if (world instanceof net.minecraft.world.level.Level level && level.localConfig().config(pos).physicsVersion.before(1_9_0)) {
+            return LEGACY_AABB;
+        }
+        // Sakura end - physics version api
         return WaterlilyBlock.AABB;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java b/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java
index f970fca8a8b479f2d2b927bcee2d73f02bfcd1b3..eeb7563ad312f048b02690fc9bfa2e00b1f1e845 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/MovingPistonBlock.java
@@ -110,6 +110,17 @@ public class MovingPistonBlock extends BaseEntityBlock {
     @Override
     protected VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
         PistonMovingBlockEntity pistonMovingBlockEntity = this.getBlockEntity(world, pos);
+        // Sakura start - physics version api
+        if (pistonMovingBlockEntity != null && world instanceof Level level && level.localConfig().config(pos).physicsVersion.before(1_9_0)) {
+            VoxelShape shape = pistonMovingBlockEntity.getCollisionShapeFromProgress(level, pos);
+
+            if (context.isAbove(shape, pos, false)) {
+                return shape;
+            } else {
+                return pistonMovingBlockEntity.getMovedState().getCollisionShape(world, pos);
+            }
+        }
+        // Sakura end - physics version api
         return pistonMovingBlockEntity != null ? pistonMovingBlockEntity.getCollisionShape(world, pos) : Shapes.empty();
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index e0c62227b279a5fe0f3868fbf9ce8c78c515a09c..4550217fdc3e804649b9c7e5e129680cae3ee0a5 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -171,6 +171,11 @@ public class PistonBaseBlock extends DirectionalBlock {
             // }
             // PAIL: checkME - what happened to setTypeAndData?
             // CraftBukkit end
+            // Sakura start - physics version api
+            if (world.localConfig().config(pos).physicsVersion.before(1_9_0)) {
+                world.setBlock(pos, state.setValue(PistonBaseBlock.EXTENDED, false), 18);
+            }
+            // Sakura end - physics version api
             world.blockEvent(pos, this, b0, enumdirection.get3DDataValue());
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
index bf58f33a5dc11b9e36cb9a26a73558c675a429df..30bbacceb253256fc083902512d5b6212a346315 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonHeadBlock.java
@@ -138,6 +138,11 @@ public class PistonHeadBlock extends DirectionalBlock {
     @Override
     protected boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
         BlockState blockState = world.getBlockState(pos.relative(state.getValue(FACING).getOpposite()));
+        // Sakura start - physics version api
+        if (world instanceof Level level && level.localConfig().config(pos).physicsVersion.before(1_9_0)) {
+            return this.isFittingBase(state, blockState);
+        }
+        // Sakura end - physics version api
         return this.isFittingBase(state, blockState) || blockState.is(Blocks.MOVING_PISTON) && blockState.getValue(FACING) == state.getValue(FACING);
     }
 
@@ -145,6 +150,10 @@ public class PistonHeadBlock extends DirectionalBlock {
     protected void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         if (state.canSurvive(world, pos)) {
             world.neighborChanged(pos.relative(state.getValue(FACING).getOpposite()), sourceBlock, sourcePos);
+            // Sakura start - physics version api
+        } else if (world.localConfig().config(pos).physicsVersion.before(1_9_0)) {
+            world.setBlock(pos, Blocks.AIR.defaultBlockState(), 19);
+            // Sakura end - physics version api
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index d555ad1dd2f648b84920eceec6cc99e8801334b3..b2ecc615379856f661ba87bdeb28f75aa7d61602 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -164,6 +164,12 @@ public class PistonMovingBlockEntity extends BlockEntity {
 
                     double i = 0.0;
 
+                    // Sakura start - physics version api
+                    if (entity.physics().before(1_11_0)) {
+                        moveEntityByPistonFromDirection(direction, entity, aABB);
+                        return;
+                    }
+                    // Sakura end - physics version api
                     for (AABB aABB2 : list2) {
                         AABB aABB3 = PistonMath.getMovementArea(moveByPositionAndProgress(pos, aABB2, blockEntity), direction, d);
                         AABB aABB4 = entity.getBoundingBox();
@@ -293,14 +299,167 @@ public class PistonMovingBlockEntity extends BlockEntity {
             }
         }
     }
+    
+    // Sakura start - physics version api
+    @javax.annotation.Nullable
+    private AABB getBoundsFromProgress(Level level, BlockPos pos, BlockState state, float progress, Direction dir, boolean absolute) {
+        if (!state.is(Blocks.MOVING_PISTON) && !state.isAir()) {
+            VoxelShape shape = this.movedState.getCollisionShape(level, pos);
+            // bounds on an empty shape causes an exception
+            if (shape.isEmpty()) return null;
+            if (absolute) shape = shape.move(pos.getX(), pos.getY(), pos.getZ());
+            AABB bounds = shape.bounds();
+
+            double minX = bounds.minX;
+            double minY = bounds.minY;
+            double minZ = bounds.minZ;
+            double maxX = bounds.maxX;
+            double maxY = bounds.maxY;
+            double maxZ = bounds.maxZ;
+
+            if (dir.getStepX() < 0) {
+                minX -= (float) dir.getStepX() * progress;
+            } else {
+                maxX -= (float) dir.getStepX() * progress;
+            }
+
+            if (dir.getStepY() < 0) {
+                minY -= (float) dir.getStepY() * progress;
+            } else {
+                maxY -= (float) dir.getStepY() * progress;
+            }
+
+            if (dir.getStepZ() < 0) {
+                minZ -= (float) dir.getStepZ() * progress;
+            } else {
+                maxZ -= (float) dir.getStepZ() * progress;
+            }
+
+            return this.fixZeroWidthBB(new AABB(minX, minY, minZ, maxX, maxY, maxZ), dir);
+        }
+
+        return null;
+    }
+
+    private AABB fixZeroWidthBB(AABB bb, Direction dir) {
+        // Legacy behaviour relied on entities being able to collide with zero width shapes
+        // This is no longer possible, so we have to create a difference here for it to work
+        double expandX = bb.getXsize() == 0.0 ? 1.0e-5 * dir.getStepX() : 0;
+        double expandY = bb.getYsize() == 0.0 ? 1.0e-5 * dir.getStepY() : 0;
+        double expandZ = bb.getZsize() == 0.0 ? 1.0e-5 * dir.getStepZ() : 0;
+
+        if (expandX != 0 || expandY != 0 || expandZ != 0) {
+            bb = bb.expandTowards(expandX, expandY, expandZ);
+        }
+
+        return bb;
+    }
+
+    public final VoxelShape getCollisionShapeFromProgress(Level level, BlockPos pos) {
+        float progress = this.getProgress(0.0f);
+
+        if (this.extending) {
+            progress = 1.0F - progress;
+        }
+
+        AABB bb = this.getBoundsFromProgress(level, pos, this.movedState, progress, this.direction, false);
+        return bb == null ? Shapes.empty() : Shapes.create(bb);
+    }
+
+    private void moveEntities(Level level, float f1) {
+        float f = this.progress;
+
+        if (this.extending) {
+            f = 1.0F - f;
+        } else {
+            --f;
+        }
+
+        AABB bb = this.getBoundsFromProgress(level, this.worldPosition, this.movedState, f, this.direction, true);
+
+        if (bb == null || bb.getSize() == 0.0) {
+            return;
+        }
+
+        List<Entity> entities = level.getEntities(null, bb);
+
+        if (entities.isEmpty()) {
+            return;
+        }
+
+        for (Entity entity : entities) {
+            if (this.movedState.is(Blocks.SLIME_BLOCK) && this.extending) {
+                Vec3 movement = entity.getDeltaMovement();
+                double x = movement.x;
+                double y = movement.y;
+                double z = movement.z;
+
+                switch (this.direction.getAxis()) {
+                    case X -> x = direction.getStepX();
+                    case Y -> y = direction.getStepY();
+                    case Z -> z = direction.getStepZ();
+                }
+
+                entity.setDeltaMovement(x, y, z);
+            } else {
+                entity.move(MoverType.PISTON, new Vec3(f1 * (float) this.direction.getStepX(), f1 * (float) this.direction.getStepY(), f1 * (float) this.direction.getStepZ()));
+            }
+        }
+    }
+
+    private static void moveEntityByPistonFromDirection(Direction direction, Entity entity, AABB blockBB) {
+        AABB entityBB = entity.getBoundingBox();
+        double movX = 0.0;
+        double movY = 0.0;
+        double movZ = 0.0;
+
+        switch (direction.getAxis()) {
+            case X -> {
+                if (direction.getAxisDirection() == Direction.AxisDirection.POSITIVE) {
+                    movX = blockBB.maxX - entityBB.minX;
+                } else {
+                    movX = entityBB.maxX - blockBB.minX;
+                }
+                movX += 0.01D;
+            }
+            case Y -> {
+                if (direction.getAxisDirection() == Direction.AxisDirection.POSITIVE) {
+                    movY = blockBB.maxY - entityBB.minY;
+                } else {
+                    movY = entityBB.maxY - blockBB.minY;
+                }
+                movY += 0.01D;
+            }
+            case Z -> {
+                if (direction.getAxisDirection() == Direction.AxisDirection.POSITIVE) {
+                    movZ = blockBB.maxZ - entityBB.minZ;
+                } else {
+                    movZ = entityBB.maxZ - blockBB.minZ;
+                }
+                movZ += 0.01D;
+            }
+        }
+
+        entity.move(MoverType.PISTON, new Vec3(movX * direction.getStepX(), movY * direction.getStepY(), movZ * direction.getStepZ()));
+    }
+    // Sakura end - physics version api
 
     public static void tick(Level world, BlockPos pos, BlockState state, PistonMovingBlockEntity blockEntity) {
+        me.samsuik.sakura.physics.PhysicsVersion physicsVersion = world.localConfig().config(pos).physicsVersion; // Sakura - physics version api
         blockEntity.lastTicked = world.getGameTime();
         blockEntity.progressO = blockEntity.progress;
         if (blockEntity.progressO >= 1.0F) {
             if (world.isClientSide && blockEntity.deathTicks < 5) {
                 blockEntity.deathTicks++;
             } else {
+                // Sakura start - physics version api
+                if (physicsVersion.isWithin(1_9_0, 1_10_0)) {
+                    moveCollidedEntities(world, pos, 1.0f, blockEntity);
+                    moveStuckEntities(world, pos, 1.0f, blockEntity);
+                } else if (physicsVersion.before(1_9_0)) {
+                    blockEntity.moveEntities(world, 0.25f);
+                }
+                // Sakura end - physics version api
                 world.removeBlockEntity(pos);
                 blockEntity.setRemoved();
                 if (world.getBlockState(pos).is(Blocks.MOVING_PISTON)) {
@@ -320,12 +479,23 @@ public class PistonMovingBlockEntity extends BlockEntity {
             }
         } else {
             float f = blockEntity.progress + 0.5F;
+            // Sakura start - physics version api
+            if (physicsVersion.afterOrEqual(1_11_0)) {
             moveCollidedEntities(world, pos, f, blockEntity);
             moveStuckEntities(world, pos, f, blockEntity);
+            }
+
             blockEntity.progress = f;
             if (blockEntity.progress >= 1.0F) {
                 blockEntity.progress = 1.0F;
             }
+            if (physicsVersion.isWithin(1_9_0, 1_10_0)) {
+                moveCollidedEntities(world, pos, f, blockEntity);
+                moveStuckEntities(world, pos, f, blockEntity);
+            } else if (blockEntity.extending && physicsVersion.before(1_9_0)) {
+                blockEntity.moveEntities(world, blockEntity.progress - blockEntity.progressO + 0.0625f);
+            }
+            // Sakura end - physics version api
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 1c82ff348769655f20ba4fde7914a326e072afce..700226cc972693336987184c761c0c8808fd77ad 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -514,7 +514,7 @@ public abstract class FlowingFluid extends Fluid {
         this.spread(world, pos, state);
     }
 
-    protected static int getLegacyLevel(FluidState state) {
+    public static int getLegacyLevel(FluidState state) { // Sakura - protected -> public
         return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + ((Boolean) state.getValue(FlowingFluid.FALLING) ? 8 : 0);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/material/LavaFluid.java b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
index 3bb4a9a1a6249e8ba2de237f801210e7f4fd5825..65e4b4e16335e2e5be6e6a6a52f12f853040338d 100644
--- a/src/main/java/net/minecraft/world/level/material/LavaFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
@@ -175,7 +175,10 @@ public abstract class LavaFluid extends FlowingFluid {
 
     @Override
     public boolean canBeReplacedWith(FluidState state, BlockGetter world, BlockPos pos, Fluid fluid, Direction direction) {
-        return state.getHeight(world, pos) >= 0.44444445F && fluid.is(FluidTags.WATER);
+        // Sakura start - physics version api
+        return state.getHeight(world, pos) >= 0.44444445F && fluid.is(FluidTags.WATER)
+            && world instanceof Level level && level.localConfig().config(pos).physicsVersion.afterOrEqual(1_13_0);
+        // Sakura end - physics version api
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/material/WaterFluid.java b/src/main/java/net/minecraft/world/level/material/WaterFluid.java
index 109f71401c65f476ccf6813137386fc9fef10254..8621e60b50cc27ef0b5468d978828c61f286be84 100644
--- a/src/main/java/net/minecraft/world/level/material/WaterFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/WaterFluid.java
@@ -120,7 +120,10 @@ public abstract class WaterFluid extends FlowingFluid {
 
     @Override
     public boolean canBeReplacedWith(FluidState state, BlockGetter world, BlockPos pos, Fluid fluid, Direction direction) {
-        return direction == Direction.DOWN && !fluid.is(FluidTags.WATER);
+        // Sakura start - physics version api
+        return direction == Direction.DOWN && !fluid.is(FluidTags.WATER)
+            || fluid.is(FluidTags.LAVA) && world instanceof Level level && level.localConfig().config(pos).physicsVersion.before(1_13_0);
+        // Sakura end - physics version api
     }
 
     @Override
