From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Wed, 15 Nov 2023 23:18:38 +0000
Subject: [PATCH] Explosion Durable Blocks


diff --git a/src/main/java/me/samsuik/sakura/explosion/durable/DurableBlockManager.java b/src/main/java/me/samsuik/sakura/explosion/durable/DurableBlockManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..c5eb573f946d24d2a44a46e0f395e00e4dc29bd6
--- /dev/null
+++ b/src/main/java/me/samsuik/sakura/explosion/durable/DurableBlockManager.java
@@ -0,0 +1,61 @@
+package me.samsuik.sakura.explosion.durable;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import me.samsuik.sakura.utils.objects.Expiry;
+import net.minecraft.core.BlockPos;
+
+public final class DurableBlockManager {
+    private final Long2ObjectOpenHashMap<DurableBlock> blocks = new Long2ObjectOpenHashMap<>();
+    private long serverTick;
+
+    public boolean damage(BlockPos pos, DurableMaterial material) {
+        long packed = pos.asLong();
+        // Expires after 1200 ticks (1 minute) without any changes.
+        DurableBlock block = this.blocks.computeIfAbsent(packed, k -> new DurableBlock(
+            new Expiry(this.serverTick, 1200),
+            material.durability()
+        ));
+
+        if (block.damage()) {
+            this.blocks.remove(packed);
+            return true;
+        } else {
+            block.getExpiry().refresh(this.serverTick);
+            return false;
+        }
+    }
+
+    public int durability(BlockPos pos, DurableMaterial material) {
+        DurableBlock block = this.blocks.get(pos.asLong());
+        return block != null ? block.getDurability() : material.durability();
+    }
+
+    public void expire(long tick) {
+        if (tick % 200 == 0) {
+            this.blocks.values().removeIf(block -> block.getExpiry().isExpired(tick));
+        }
+        this.serverTick = tick;
+    }
+
+    private static final class DurableBlock {
+        private final Expiry expiry;
+        private int durability;
+
+        public DurableBlock(Expiry expiry, int durability) {
+            this.expiry = expiry;
+            this.durability = durability;
+        }
+
+        public Expiry getExpiry() {
+            return this.expiry;
+        }
+
+        public int getDurability() {
+            return this.durability;
+        }
+
+        public boolean damage() {
+            return --this.durability <= 0;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index af3bcb2dff44d9a734cab9610abbe5d7430c5d57..479e10d3b431ce1292c97b4c2af18c79433e43e8 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1827,6 +1827,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             worldserver.minimalTNT.clear(); // Sakura - visibility api
             worldserver.mergeHandler.expire(currentTickLong); // Sakura - merge cannon entities
             worldserver.densityCache.clear(currentTickLong); // Sakura - explosion density cache
+            worldserver.durabilityManager.expire(currentTickLong); // Sakura
         }
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
diff --git a/src/main/java/net/minecraft/world/item/ItemNameBlockItem.java b/src/main/java/net/minecraft/world/item/ItemNameBlockItem.java
index a8008c7550488be34b51f4280f5569170b1ebd1d..2e5a46b9d27b930870c68dbde93d8731fd364219 100644
--- a/src/main/java/net/minecraft/world/item/ItemNameBlockItem.java
+++ b/src/main/java/net/minecraft/world/item/ItemNameBlockItem.java
@@ -7,6 +7,33 @@ public class ItemNameBlockItem extends BlockItem {
         super(block, settings);
     }
 
+    // Sakura start - explosion durable blocks
+    @Override
+    public net.minecraft.world.InteractionResult useOn(net.minecraft.world.item.context.UseOnContext context) {
+        Block itemBlock = this.getBlock();
+        if (context.getPlayer() != null && itemBlock.equals(net.minecraft.world.level.block.Blocks.POTATOES)) {
+            net.minecraft.world.entity.player.Player player = context.getPlayer();
+            net.minecraft.world.level.block.state.BlockState state = context.getLevel().getBlockState(context.getClickedPos());
+            Block block = state.getBlock();
+            me.samsuik.sakura.explosion.durable.DurableMaterial material = context.getLevel().localConfig().config(context.getClickedPos()).durableMaterials.get(block);
+
+            if (material != null) {
+                int durability = context.getLevel().durabilityManager.durability(context.getClickedPos(), material);
+                this.sendPotatoMessage(player, durability, material.durability());
+            }
+        }
+        return super.useOn(context);
+    }
+
+    private void sendPotatoMessage(net.minecraft.world.entity.player.Player player, int remaining, int durability) {
+        player.getBukkitEntity().sendRichMessage(
+            me.samsuik.sakura.configuration.GlobalConfiguration.get().players.potatoMessage,
+            net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.unparsed("remaining", String.valueOf(remaining)),
+            net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.unparsed("durability", String.valueOf(durability))
+        );
+    }
+    // Sakura end - explosion durable blocks
+
     @Override
     public String getDescriptionId() {
         return this.getOrCreateDescriptionId();
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index fef6966070e0b539f246293652140fb9504c06bd..1c57725cef4bb0613b4bb539814c914aed5c179d 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -144,7 +144,7 @@ public class Explosion {
             BlockState blockState = ((ca.spottedleaf.moonrise.patches.chunk_getblock.GetBlockChunk)chunk).moonrise$getBlock(x, y, z);
             FluidState fluidState = blockState.getFluidState();
 
-            Optional<Float> resistance = !calculateResistance ? Optional.empty() : this.damageCalculator.getBlockExplosionResistance((Explosion)(Object)this, this.level, pos, blockState, fluidState);
+            Optional<Float> resistance = !calculateResistance ? Optional.empty() : this.calculateBlockResistance(blockState, fluidState, pos); // Sakura - explosion durable blocks
 
             ret = new ca.spottedleaf.moonrise.patches.collisions.ExplosionBlockCache(
                 key, pos, blockState, fluidState,
@@ -158,6 +158,21 @@ public class Explosion {
         return ret;
     }
 
+    // Sakura start - explosion durable blocks
+    private Optional<Float> calculateBlockResistance(BlockState blockState, FluidState fluidState, BlockPos pos) {
+        if (!blockState.isAir()) {
+            Block block = blockState.getBlock();
+            me.samsuik.sakura.explosion.durable.DurableMaterial material = this.level.localConfig().config(pos).durableMaterials.get(block);
+
+            if (material != null && material.resistance() >= 0.0f && (this.level.sakuraConfig().cannons.explosion.allowNonTntBreakingDurableBlocks || this.source instanceof net.minecraft.world.entity.item.PrimedTnt)) {
+                return Optional.of(material.resistance());
+            }
+        }
+
+        return this.damageCalculator.getBlockExplosionResistance((Explosion)(Object)this, this.level, pos, blockState, fluidState);
+    }
+    // Sakura end - explosion durable blocks
+
     private boolean clipsAnything(final Vec3 from, final Vec3 to,
                                   final ca.spottedleaf.moonrise.patches.collisions.CollisionUtil.LazyEntityCollisionContext context,
                                   final ca.spottedleaf.moonrise.patches.collisions.ExplosionBlockCache[] blockCache,
@@ -831,6 +846,16 @@ public class Explosion {
                 // CraftBukkit start - TNTPrimeEvent
                 BlockState iblockdata = this.level.getBlockState(blockposition);
                 Block block = iblockdata.getBlock();
+                // Sakura start - explosion durable blocks
+                if (this.level.sakuraConfig().cannons.explosion.allowNonTntBreakingDurableBlocks || this.source instanceof net.minecraft.world.entity.item.PrimedTnt) {
+                    me.samsuik.sakura.explosion.durable.DurableMaterial material = this.level.localConfig().config(blockposition).durableMaterials.get(block);
+
+                    if (material != null && material.durability() >= 0 && !this.level.durabilityManager.damage(blockposition, material)) {
+                        objectlistiterator.remove();
+                        continue;
+                    }
+                }
+                // Sakura end - explosion durable blocks
                 if (block instanceof net.minecraft.world.level.block.TntBlock) {
                     Entity sourceEntity = this.source == null ? null : this.source;
                     BlockPos sourceBlock = sourceEntity == null ? BlockPos.containing(this.x, this.y, this.z) : null;
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 17dadcfbc016992c0c999d2b02da69b4c8f0712c..603b2e94e36570441567a4ea8481f032f0571fa4 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -698,6 +698,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public final it.unimi.dsi.fastutil.longs.Long2IntMap minimalTNT = new it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap(); // Sakura - visibility api
     public final me.samsuik.sakura.entity.merge.EntityMergeHandler mergeHandler = new me.samsuik.sakura.entity.merge.EntityMergeHandler(); // Sakura - merge cannon entities
     public final me.samsuik.sakura.explosion.density.BlockDensityCache densityCache = new me.samsuik.sakura.explosion.density.BlockDensityCache(); // Sakura - explosion density cache
+    public final me.samsuik.sakura.explosion.durable.DurableBlockManager durabilityManager = new me.samsuik.sakura.explosion.durable.DurableBlockManager(); // Sakura - explosion durable blocks
 
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, Supplier<me.samsuik.sakura.configuration.WorldConfiguration> sakuraWorldConfigCreator, java.util.concurrent.Executor executor) { // Sakura - sakura configuration files// Paper - create paper world config & Anti-Xray
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
