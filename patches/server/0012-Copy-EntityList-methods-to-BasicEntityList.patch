From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Thu, 14 Oct 2021 19:16:49 +0100
Subject: [PATCH] Copy EntityList methods to BasicEntityList


diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
index b3c993a790fc3fab6a408c731deb297f74c959ce..a24c509fc1f1052047d73847aacdd863fe8ea6e1 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
@@ -392,6 +392,13 @@ public final class ChunkEntitySlices {
 
         private E[] storage;
         private int size;
+        // Sakura start - use methods from EntityList
+        private it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap entityToIndex = null;
+        private void setupIndexMap() {
+            this.entityToIndex = new it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap(2, 0.8f);
+            this.entityToIndex.defaultReturnValue(Integer.MIN_VALUE);
+        }
+        // Sakura end - use methods from EntityList
 
         public BasicEntityList() {
             this(0);
@@ -412,6 +419,7 @@ public final class ChunkEntitySlices {
         private void resize() {
             if (this.storage == EMPTY) {
                 this.storage = (E[])new Entity[DEFAULT_CAPACITY];
+                this.setupIndexMap(); // Sakura - use methods from EntityList
             } else {
                 this.storage = Arrays.copyOf(this.storage, this.storage.length * 2);
             }
@@ -425,6 +433,7 @@ public final class ChunkEntitySlices {
             } else {
                 this.storage[idx] = entity;
             }
+            this.entityToIndex.put(entity.getId(), idx); // Sakura - use methods from EntityList
         }
 
         public int indexOf(final E entity) {
@@ -440,24 +449,32 @@ public final class ChunkEntitySlices {
         }
 
         public boolean remove(final E entity) {
-            final int idx = this.indexOf(entity);
-            if (idx == -1) {
+            // Sakura start - use methods from EntityList
+            if (this.entityToIndex == null) {
                 return false;
             }
 
-            final int size = --this.size;
-            final E[] storage = this.storage;
-            if (idx != size) {
-                System.arraycopy(storage, idx + 1, storage, idx, size - idx);
+            final int index = this.entityToIndex.remove(entity.getId());
+            if (index == Integer.MIN_VALUE) {
+                return false;
             }
 
-            storage[size] = null;
+            // move the entity at the end to this index
+            final int endIndex = --this.size;
+            final E end = this.storage[endIndex];
+            if (index != endIndex) {
+                // not empty after this call
+                this.entityToIndex.put(end.getId(), index); // update index
+            }
+            this.storage[index] = end;
+            this.storage[endIndex] = null;
+            // Sakura end - use methods from EntityList
 
             return true;
         }
 
         public boolean has(final E entity) {
-            return this.indexOf(entity) != -1;
+            return this.entityToIndex != null && this.entityToIndex.containsKey(entity.getId()); // Sakura - use methods from EntityList
         }
     }
 
