From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Wed, 16 Aug 2023 22:34:49 +0100
Subject: [PATCH] Store Entity Data/State


diff --git a/src/main/java/me/samsuik/sakura/entity/EntityState.java b/src/main/java/me/samsuik/sakura/entity/EntityState.java
new file mode 100644
index 0000000000000000000000000000000000000000..10630c7e04a137ce766f4a45cb0f2e51bd967c98
--- /dev/null
+++ b/src/main/java/me/samsuik/sakura/entity/EntityState.java
@@ -0,0 +1,37 @@
+package me.samsuik.sakura.entity;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
+
+import java.util.Optional;
+
+public record EntityState(Vec3 position, Vec3 momentum, AABB bb, Vec3 stuckSpeed, Optional<BlockPos> supportingPos, boolean onGround, float fallDistance) {
+    public static EntityState of(Entity entity) {
+        return new EntityState(entity.position(), entity.getDeltaMovement(), entity.getBoundingBox(), entity.stuckSpeedMultiplier(), entity.mainSupportingBlockPos, entity.onGround(), entity.fallDistance);
+    }
+
+    public void apply(Entity entity) {
+        entity.setPos(this.position);
+        entity.setDeltaMovement(this.momentum);
+        entity.setBoundingBox(this.bb);
+        // null here is only safe for our use case (tnt and sand)
+        //noinspection DataFlowIssue
+        entity.makeStuckInBlock(null, this.stuckSpeed);
+        entity.onGround = this.onGround;
+        entity.mainSupportingBlockPos = this.supportingPos;
+        entity.fallDistance = this.fallDistance;
+    }
+
+    public void position(Entity entity) {
+        entity.setPos(this.position);
+        entity.setBoundingBox(this.bb);
+    }
+
+    public boolean isCurrentState(Entity entity) {
+        return entity.position().equals(this.position)
+            && entity.getDeltaMovement().equals(this.momentum);
+            // && entity.getBoundingBox().equals(bb); // uncomment if there are issues with morphed bounding boxes
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1927afe8646219403e013c92a6da0a47caf5d7d5..3233e54b6f85ab03859b5a3f2912b7cfb115d050 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -567,6 +567,25 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return flags;
     }
     // Sakura end - load chunks on movement
+    // Sakura start - store entity data/state
+    private me.samsuik.sakura.entity.EntityState entityState = null;
+
+    public final Vec3 stuckSpeedMultiplier() {
+        return this.stuckSpeedMultiplier;
+    }
+
+    public final void storeEntityState() {
+        this.entityState = me.samsuik.sakura.entity.EntityState.of(this);
+    }
+
+    public final me.samsuik.sakura.entity.EntityState entityState() {
+        return this.entityState;
+    }
+
+    public final boolean compareState(Entity to) {
+        return to.entityState() != null && to.entityState().isCurrentState(this);
+    }
+    // Sakura end - store entity data/state
 
     public Entity(EntityType<?> type, Level world) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index c811bc64d0686fdec58defb707d57e539c261b48..0925de100a7da3bba6c3fab7a0c79b2ee0d86904 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1430,6 +1430,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
 
     public <T extends Entity> void guardEntityTick(Consumer<T> tickConsumer, T entity) {
         try {
+            entity.storeEntityState(); // Sakura - store entity data/state
             tickConsumer.accept(entity);
         } catch (Throwable throwable) {
             if (throwable instanceof ThreadDeath) throw throwable; // Paper
